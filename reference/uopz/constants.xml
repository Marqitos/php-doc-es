<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 86e6094e86b84a51d00ab217ac50ce8dde33d82a Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes Maintainer: Marqitos -->

<appendix xml:id="uopz.constants" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 &reftitle.constants;
 &extension.constants;
 <para>
  Los siguientes opcodes son definidos como constantes por uopz antes de 5.0.0:
 </para>
 <para>
  <variablelist>
   <varlistentry xml:id="constant.zend-exit">
    <term>
     <constant>ZEND_EXIT</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Invoca exit() y die(); no recibe ningún argumento.
      Devuelve &true; para salir, &false; para continuar
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-new">
    <term>
     <constant>ZEND_NEW</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Invocado por la construcción de un objeto, recibe el objeto de la clase creada como
      único argumento
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-throw">
    <term>
     <constant>ZEND_THROW</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Invocado por la estructura throw, recibe la excepción de la clase emitida como único argumento
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-fetch-class">
    <term>
     <constant>ZEND_FETCH_CLASS</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Invocado durante una composición, recibe la clase, el nombre de la clase recuperada como único argumento
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-add-trait">
    <term>
     <constant>ZEND_ADD_TRAIT</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Invocado durante una composición, recibe la clase en la cual el trait será añadido, como primer
      argumento, y el nombre del trait como segundo argumento
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-add-interface">
    <term>
     <constant>ZEND_ADD_INTERFACE</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Invocado durante una composición, recibe la clase en la cual la interfaz será añadida como primer
      argumento, y el nombre de la interfaz como segundo argumento
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-instanceof">
    <term>
     <constant>ZEND_INSTANCEOF</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Invocado por el operador instanceof, recibe el objeto a verificar como primer argumento,
      y el nombre de la clase a la que pertenece el objeto como segundo argumento
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
 </para>
 <para>
  Las siguientes constantes controlan el comportamiento del VM después de que un gestor usuario
  sea llamado; sea extremadamente cuidadoso!
  Estas constantes son eliminadas a partir de uopz 5.0.0.
 </para>
 <para>
  <variablelist>
   <varlistentry xml:id="constant.zend-user-opcode-continue">
    <term>
     <constant>ZEND_USER_OPCODE_CONTINUE</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Avance de un opcode, y continúe
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-user-opcode-enter">
    <term>
     <constant>ZEND_USER_OPCODE_ENTER</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Entrar en un nuevo op_array sin recursión
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-user-opcode-leave">
    <term>
     <constant>ZEND_USER_OPCODE_LEAVE</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Retorna el op_array llamado en el mismo ejecutor
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-user-opcode-dispatch">
    <term>
     <constant>ZEND_USER_OPCODE_DISPATCH</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Despacha el gestor opcode original
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-user-opcode-dispatch-to">
    <term>
     <constant>ZEND_USER_OPCODE_DISPATCH_TO</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Despacha a un gestor específico (o combinado con la constante opcode de ZEND)
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-user-opcode-return">
    <term>
     <constant>ZEND_USER_OPCODE_RETURN</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Sale del ejecutor (retorna a la función)
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
 </para>
 <para>
  Los siguientes modificadores están registrados como constantes por uopz
 </para>
 <para>
  <variablelist>
   <varlistentry xml:id="constant.zend-acc-public">
    <term>
     <constant>ZEND_ACC_PUBLIC</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Marca una función como pública, el comportamiento por omisión
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-acc-protected">
    <term>
     <constant>ZEND_ACC_PROTECTED</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Marca una función como protegida
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-acc-private">
    <term>
     <constant>ZEND_ACC_PRIVATE</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Marca una función como privada
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-acc-static">
    <term>
     <constant>ZEND_ACC_STATIC</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Marca una función como estática
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-acc-final">
    <term>
     <constant>ZEND_ACC_FINAL</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Marca una función como final
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-acc-abstract">
    <term>
     <constant>ZEND_ACC_ABSTRACT</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Marca una función como abstracta
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-acc-class">
    <term>
     <constant>ZEND_ACC_CLASS</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Registro ficticio para consistencia, el tipo de entrada de clase por omisión.
      Eliminada a partir de uopz 5.0.0.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-acc-interface">
    <term>
     <constant>ZEND_ACC_INTERFACE</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Marca la clase como una interfaz.
      Eliminada a partir de uopz 5.0.0.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-acc-trait">
    <term>
     <constant>ZEND_ACC_TRAIT</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Marca la clase como un trait.
      Eliminada a partir de uopz 5.0.0.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-acc-fetch">
    <term>
     <constant>ZEND_ACC_FETCH</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Utilizado para recuperar solo los flags.
      Eliminada a partir de uopz 5.0.0.
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
 </para>
</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
