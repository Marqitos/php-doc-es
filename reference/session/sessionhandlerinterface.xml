<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 8859c8b96cd9e80652813f7bcf561432a5e9f934 Maintainer: seros Status: ready -->
<!-- Reviewed: yes Maintainer: julionc -->
<reference xml:id="class.sessionhandlerinterface" role="class" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>La clase SessionHandlerInterface</title>
 <titleabbrev>SessionHandlerInterface</titleabbrev>

 <partintro>

  <!-- {{{ SessionHandlerInterface intro -->
  <section xml:id="sessionhandlerinterface.intro">
   &reftitle.intro;
   <para>
    <classname>SessionHandlerInterface</classname> es una interfaz que define un
    prototipo para crear un gestor de sesiones personalizado. Para pasar un gestor de
    sesiones personalizado a <function>session_set_save_handler</function> usando su
    invocación de <literal>POO</literal>, la clase debe implementar esta interfaz.
   </para>
   <para>
    Observe que los métodos de llamada de retorno de esta clase están diseñados para ser llamados internamente por
    PHP y no para ser llamados desde código de espacio de usuario.
   </para>
  </section>
  <!-- }}} -->

  <section xml:id="sessionhandlerinterface.synopsis">
   &reftitle.interfacesynopsis;

   <!-- {{{ Synopsis -->
   <classsynopsis class="interface">
    <oointerface>
     <interfacename>SessionHandlerInterface</interfacename>
    </oointerface>

    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.sessionhandlerinterface')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[@role='SessionHandlerInterface'])">
     <xi:fallback/>
    </xi:include>
   </classsynopsis>
   <!-- }}} -->

  </section>

  <section xml:id="sessionhandlerinterface.examples">
   &reftitle.examples;
   <example>
    <title>
     Ejemplo usando <classname>SessionHandlerInterface</classname>
    </title>
    <para>
     El siguiente ejemplo proporciona almacenamiento de sesiones basado en ficheros similar al
     gestor de almacenamiento de sesiones predeterminado de PHP <parameter>files</parameter>. Este
     ejemplo podría fácilmente ser extendido para cubrir almacenamiento de bases de datos usando su
     motor de bases de datos favorito soportado por PHP.
    </para>
    <para>
     Observe que usamos el prototipo de POO con <function>session_set_save_handler</function> y
     registramos la función de cierre usando la bandera de parámetro de la función. Esto normalmente es
     aconsejable al registrar objetos como gestores de almacenamiento de sesiones.
    </para>
    <caution>
     <para>
      Por razones de brevedad, este ejemplo omite la validación de entradas. Sin embargo,
      los parámetros <literal>$id</literal> son en realidad valores suministrados por el usuario
      que requieren una validación/sanitización adecuada para evitar vulnerabilidades, como
      problemas de recorrido o cruce en la ruta de acceso. <emphasis>Así que no utilice este ejemplo
      sin modificar en entornos de producción.</emphasis>
     </para>
    </caution>
    <programlisting role="php">
<![CDATA[
<?php
class MySessionHandler implements SessionHandlerInterface
{
    private $savePath;

    public function open($savePath, $sessionName): bool
    {
        $this->savePath = $savePath;
        if (!is_dir($this->savePath)) {
            mkdir($this->savePath, 0777);
        }

        return true;
    }

    public function close(): bool
    {
        return true;
    }

    #[\ReturnTypeWillChange]
    public function read($id)
    {
        return (string) @file_get_contents("$this->savePath/sess_$id");
    }

    public function write($id, $data): bool
    {
        return file_put_contents("$this->savePath/sess_$id", $data) === false ? false : true;
    }

    public function destroy($id): bool
    {
        $file = "$this->savePath/sess_$id";
        if (file_exists($file)) {
            unlink($file);
        }

        return true;
    }

    #[\ReturnTypeWillChange]
    public function gc($maxlifetime)
    {
        foreach (glob("$this->savePath/sess_*") as $file) {
            if (filemtime($file) + $maxlifetime < time() && file_exists($file)) {
                unlink($file);
            }
        }

        return true;
    }
}

$handler = new MySessionHandler();
session_set_save_handler($handler, true);
session_start();

// proceed to set and retrieve values by key from $_SESSION
]]>
    </programlisting>
   </example>
  </section>

 </partintro>

 &reference.session.entities.sessionhandlerinterface;

</reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
