<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 8ad67ee7a8cc6c9d7a4cf78065cab87bf2e6c08e Maintainer: Marqitos Status: ready -->
<!-- Reviewed: no Maintainer: seros -->
 <chapter xml:id="language.basic-syntax" xmlns="http://docbook.org/ns/docbook">
  <title>Sintaxis básica</title>
  <sect1 xml:id="language.basic-syntax.phptags">
   <title>Etiquetas de PHP</title>
   <para>
   Cuando PHP analiza un fichero, busca las etiquetas de apertura y cierre,
   que son <literal>&lt;?php</literal> y <literal>?&gt;</literal>, y que indican a PHP
   dónde empezar y finalizar la interpretación del código. El contenido fuera de estas
   etiquetas será ignorado por el analizador de PHP, lo que permite que PHP
   se embeba en varios tipos de documentos.
   </para>

   <para>
    Un carácter de espacio en blanco (espacio, tabulación o nueva línea) debe seguir a
    <literal>&lt;?php</literal> para garantizar una separación adecuada de los tokens.
    Omitir este espacio en blanco resultará en un error de sintaxis.
   </para>

   <para>
    PHP también incluye la etiqueta corta de eco <literal>&lt;?=</literal>,
    que es una abreviatura de <code>&lt;?php echo</code>.
   </para>
   <para>
    <example>
     <title>Etiquetas de apertura y cierre en PHP</title>
     <programlisting role="php">
<![CDATA[
1.  <?php echo 'si quieres servir código PHP en documentos XHTML o XML,
                utiliza estas etiquetas'; ?>

2.  Puedes utilizar la etiqueta corta de echo para <?= 'imprimir esta cadena' ?>.
    Es equivalente a <?php echo 'imprimir esta cadena' ?>.

3.  <? echo 'este código está dentro de etiquetas cortas, pero solo funcionará '.
            'si está habilitado short_open_tag'; ?>
]]>
     </programlisting>
    </example>
   </para>

   <para>
    Las etiquetas cortas (ejemplo tres) están disponibles por defecto, pero se pueden desactivar
    ya sea mediante la directiva del archivo de configuración <link linkend="ini.short-open-tag">short_open_tag</link>
    en &php.ini;, o están desactivadas por defecto si
    PHP se compila con la configuración <option>--disable-short-tags</option>.
   </para>
   <para>
    <note>
     <para>
      Como las etiquetas cortas pueden deshabilitarse, se recomienda usar solo las
      etiquetas normales (<code>&lt;?php ?&gt;</code> y <code>&lt;?= ?&gt;</code>) para
      maximizar la compatibilidad.
     </para>
    </note>
   </para>

   <para>
    Si un fichero contiene solamente código de PHP, es preferible omitir la etiqueta de cierre de PHP
    al final del mismo. Así se previene la adición de espacios en blanco o nuevas líneas
    accidentales después de la etiqueta de cierre, lo cual causaría efectos no deseados
    debido a que PHP comenzará la salida del búfer cuando no había intención por parte
    del programador de enviar ninguna salida en ese punto del script.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
echo "Hola mundo";

// ... más código

echo "Última sentencia";

// el script finaliza aquí sin etiqueta de cierre de PHP
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect1>

  <sect1 xml:id="language.basic-syntax.phpmode">
   <title>Salir de HTML</title>
   <para>
    Cualquier cosa fuera de un par de etiquetas de apertura y cierre es ignorado por el
    intérprete de PHP, lo que permite que los ficheros de PHP tengan contenido mixto. Esto hace
    que PHP pueda ser embebido en documentos HTML para, por ejemplo, crear plantillas.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<p>Esto va a ser ignorado por PHP y mostrado por el navegador.</p>
<?php echo 'Mientras que esto va a ser interpretado.'; ?>
<p>Esto también será ignorado por PHP y mostrado por el navegador.</p>
]]>
     </programlisting>
    </informalexample>
   Este ejemplo funciona como estaba previsto, porque cuando PHP intercepta las etiquetas de cierre
   ?&gt;, simplemente comienza a imprimir cualquier cosa que encuentre (a excepción de
   una nueva línea inmediatamente después; véase la
   <link linkend="language.basic-syntax.instruction-separation">separación de instrucciones</link>)
   hasta que dé con otra etiqueta de apertura a menos que se encuentre en mitad de una sentencia
   condicional, en cuyo caso el intérprete determinará el resultado de la
   condición antes de tomar una decisión de qué es lo que tiene que saltar.
   Vea el siguiente ejemplo.
  </para>
  <para>
   Empleo de estructuras con condiciones
   <example>
    <title>Salida avanzada usando condiciones</title>
    <programlisting role="php">
<![CDATA[
<?php if ($expresión == true): ?>
  Esto se mostrará si la expresión es verdadera.
<?php else: ?>
  En caso contrario se mostrará esto.
<?php endif; ?>
]]>
    </programlisting>
   </example>
   En este ejemplo, PHP saltará los bloques donde la condición no se cumpla, incluso
   si están fuera de las etiquetas de apertura/cierre de PHP, los saltará según
   la condición debido a que el intérprete salta los bloques contenidos
   dentro de una condición que no se cumpla.
  </para>
  <para>
   Para imprimir bloques de texto grandes, es más eficiente abandonar el modo
   intérprete de PHP que enviar todo el texto a través de
   <function>echo</function> o <function>print</function>.
  </para>
  <para>
   <note>
    <para>
     Observe también que si se está embebiendo PHP dentro de XML o XHTML
     será necesario usar las etiquetas &lt;?php ?&gt; para seguir los
     estándares.
    </para>
   </note>
  </para>
 </sect1>
 <sect1 xml:id="language.basic-syntax.instruction-separation">
  <title>Separación de instrucciones</title>
  <para>
   Como en C o en Perl, PHP requiere que las instrucciones terminen
   en punto y coma al final de cada sentencia. La etiqueta de cierre
   de un bloque de código de PHP automáticamente implica un punto y coma; no
   es necesario usar un punto y coma para cerrar la última línea de un
   bloque de PHP. La etiqueta de cierre del bloque incluirá la nueva línea
   final inmediata si está presente.
  </para>

   <para>
    <example>
     <title>Ejemplo que muestra la etiqueta de cierre abarcando la nueva línea final</title>
     <programlisting role="php">
<![CDATA[
<?php echo "Algo de texto"; ?>
Sin nueva línea
<?= "Pero nueva línea ahora" ?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
Algo de textoSin nueva línea
Pero nueva línea ahora
]]>
     </screen>
    </example>
   </para>

   <para>
    Ejemplos de entrada y salida del analizador PHP:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
    echo 'Esto es una prueba';
?>

<?php echo 'Esto es una prueba' ?>

<?php echo 'Hemos omitido la última etiqueta de cierre';
]]>
     </programlisting>
    </informalexample>
    <note>
     <para>
      La etiqueta de cierre de un bloque de PHP es opcional al final de un fichero,
      y en algunos casos es útil omitirla cuando se usa <function>include</function>
      o <function>require</function>, para que no se produzcan espacios
      en blanco al final de los ficheros, pudiéndose aún añadir así
      cabeceras para la respuesta posterior. También es práctico si se utiliza la salida
      del buffer y no se desean espacios en blanco no deseados
      al final de las partes generadas por ficheros incluídos.
     </para>
    </note>
   </para>
  </sect1>
  <sect1 xml:id="language.basic-syntax.comments">
   <title>Comentarios</title>
   <para>
    PHP admite comentarios al estilo de 'C', 'C++' y de consola de Unix (estilo de Perl). Por ejemplo:

    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
    echo 'Esto es una prueba'; // Esto es un comentario al estilo de c++ de una sola línea
    /* Esto es un comentario multilínea
       y otra lína de comentarios */
    echo 'Esto es otra prueba';
    echo 'Una prueba final'; # Esto es un comentario al estilo de consola de una sola línea
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    Los comentarios al estilo de "una sola línea" solo comentan hasta el final
    de la línea o del bloque actual de código de PHP, lo primero que suceda.
    Esto implica que el código HTML después de <literal>// ... ?&gt;</literal>
    o <literal># ...  ?&gt;</literal> SERÁ impreso:
    ?&gt; sale del modo PHP y vuelve al modo HTML, por lo que
    <literal>//</literal> o <literal>#</literal> no pueden influir en eso.
   </simpara>
   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<h1>Esto es un <?php # echo 'simple';?> ejemplo</h1>
<p>El encabezado anterior dirá 'Esto es un  ejemplo'.</p>
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    Los comentarios al estilo de 'C' finalizan con el primer <literal>*/</literal> que se encuentre.
    Asegúrese de no anidar comentarios al estilo de 'C'. Es muy fácil cometer este
    error cuando se intenta comentar un bloque grande de código.
   </simpara>
   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
 /*
    echo 'Esto es una prueba'; /* Este comentario causará un problema*/
 */
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect1>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
