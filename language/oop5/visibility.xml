<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 7d7b378abd302430b8ce7cedb4b78c7033f5e88c Maintainer: seros Status: ready -->
<!-- Reviewed: no Maintainer: andresdzphp -->
<sect1 xml:id="language.oop5.visibility" xmlns="http://docbook.org/ns/docbook">
 <title>Visibilidad</title>
 <para>
  La visibilidad de una propiedad, un método o (a partir de PHP 7.1.0) una constante se puede definir anteponiendo
  a su declaración una de las palabras reservadas <literal>public</literal>,
  <literal>protected</literal> o
  <literal>private</literal>. A los miembros de clase declarados como 'public' se puede
  acceder desde donde sea; a los miembros declarados como 'protected',
  solo desde la misma clase, mediante clases heredadas o desde la clase padre. A los miembros
  declarados como 'private' únicamente se puede acceder desde la clase que los
  definió.
 </para>

 <sect2 xml:id="language.oop5.visibility-members">
  <title>Visibilidad de propiedades</title>
   <para>
    Las propiedades de clases deben ser definidas como 'public', 'private'
    o 'protected'. Las propiedades declaradas sin especificar explícitamente
    una visibilidad se consideran públicas.
   </para>
   <example>
    <title>Declaración de propiedades</title>
    <programlisting role="php">
<![CDATA[
<?php
/**
 * Definición de MyClass
 */
class MyClass
{
    public $public = 'Public';
    protected $protected = 'Protected';
    private $private = 'Private';

    function printHello()
    {
        echo $this->public;
        echo $this->protected;
        echo $this->private;
    }
}

$obj = new MyClass();
echo $obj->public;    // Funciona bien
echo $obj->protected; // Error Fatal
echo $obj->private;   // Error Fatal
$obj->printHello();   // Muestra Public, Protected y Private


/**
 * Definición de MyClass2
 */
class MyClass2 extends MyClass
{
    // Se pueden redeclarar las propiedades pública y protegida, pero no la privada
    public $public = 'Public2';
    protected $protected = 'Protected2';

    function printHello()
    {
        echo $this->public;
        echo $this->protected;
        echo $this->private;
    }
}

$obj2 = new MyClass2();
echo $obj2->public;    // Funciona bien
echo $obj2->protected; // Error Fatal
echo $obj2->private;   // Undefined
$obj2->printHello();   // Muestra Public2, Protected2, Undefined

?>
]]>
    </programlisting>
   </example>
   <sect3 xml:id="language.oop5.visibility-members-aviz">
    <title>Visibilidad asimétrica de propiedades</title>
    <simpara>
     A partir de PHP 8.4, las propiedades también pueden tener su
     visibilidad configurada de manera asimétrica, con un alcance diferente para
     lectura (<literal>get</literal>) y escritura (<literal>set</literal>).
     Específicamente, la visibilidad de <literal>set</literal> puede
     especificarse por separado, siempre que no sea más permisiva que la
     visibilidad predeterminada.
    </simpara>
    <example>
     <title>Visibilidad asimétrica de propiedades</title>
     <programlisting role="php">
<![CDATA[
<?php
class Book
{
    public function __construct(
        public private(set) string $title,
        public protected(set) string $author,
        protected private(set) int $pubYear,
    ) {}
}

class SpecialBook extends Book
{
    public function update(string $author, int $year): void
    {
        $this->author = $author; // OK
        $this->pubYear = $year; // Fatal Error
    }
}

$b = new Book('How to PHP', 'Peter H. Peterson', 2024);

echo $b->title; // Works
echo $b->author; // Works
echo $b->pubYear; // Fatal Error

$b->title = 'How not to PHP'; // Fatal Error
$b->author = 'Pedro H. Peterson'; // Fatal Error
$b->pubYear = 2023; // Fatal Error
?>
]]>
     </programlisting>
    </example>
    <para>There are a few caveats regarding asymmetric visibility:</para>
    <itemizedlist>
     <listitem>
      <simpara>
       Only typed properties may have a separate <literal>set</literal> visibility.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       The <literal>set</literal> visibility must be the same
       as <literal>get</literal> or more restrictive. That is,
       <code>public protected(set)</code> and <code>protected protected(set)</code>
       are allowed, but <code>protected public(set)</code> will cause a syntax error.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       If a property is <literal>public</literal>, then the main visibility may be
       omitted.  That is, <code>public private(set)</code> and <code>private(set)</code>
       will have the same result.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       A property with <literal>private(set)</literal> visibility
       is automatically <literal>final</literal>, and may not be redeclared in a child class.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Obtaining a reference to a property follows <literal>set</literal> visibility, not <literal>get</literal>.
       That is because a reference may be used to modify the property value.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Similarly, trying to write to an array property involves both a <literal>get</literal> and
       <literal>set</literal> operation internally, and therefore will follow the <literal>set</literal>
       visibility, as that is always the more restrictive.
      </simpara>
     </listitem>
    </itemizedlist>
    <simpara>
     When a class extends another, the child class may redefine
     any property that is not <literal>final</literal>.  When doing so,
     it may widen either the main visibility or the <literal>set</literal>
     visibility, provided that the new visibility is the same or wider
     than the parent class.  However, be aware that if a <literal>private</literal>
     property is overridden, it does not actually change the parent's property
     but creates a new property with a different internal name.
    </simpara>
    <example>
     <title>Asymmetric Property inheritance</title>
     <programlisting role="php">
<![CDATA[
<?php
class Book
{
    protected string $title;
    public protected(set) string $author;
    protected private(set) int $pubYear;
}

class SpecialBook extends Book
{
    public protected(set) $title; // OK, as reading is wider and writing the same.
    public string $author; // OK, as reading is the same and writing is wider.
    public protected(set) int $pubYear; // Fatal Error. private(set) properties are final.
}
?>
]]>
     </programlisting>
    </example>
   </sect3>
  </sect2>

 <sect2 xml:id="language.oop5.visiblity-methods">
  <title>Visibilidad de Métodos</title>
  <para>
   Los métodos de clases pueden ser definidos como public, private,
   o protected. Aquellos declarados sin ninguna palabra clave de
   visibilidad explícita serán definidos como public.
  </para>
  <para>
   <example>
    <title>Declaración de métodos</title>
    <programlisting role="php">
<![CDATA[
<?php
/**
 * Definición de MyClass
 */
class MyClass
{
    // Declaración de un constructor public
    public function __construct() { }

    // Declaración de un método public
    public function MyPublic() { }

    // Declaración de un método protected
    protected function MyProtected() { }

    // Declaración de un método private
    private function MyPrivate() { }

    // Esto es public
    function Foo()
    {
        $this->MyPublic();
        $this->MyProtected();
        $this->MyPrivate();
    }
}

$myclass = new MyClass;
$myclass->MyPublic(); // Funciona
$myclass->MyProtected(); // Error Fatal
$myclass->MyPrivate(); // Error Fatal
$myclass->Foo(); // Public, Protected y Private funcionan


/**
 * Definición de MyClass2
 */
class MyClass2 extends MyClass
{
    // Esto es public
    function Foo2()
    {
        $this->MyPublic();
        $this->MyProtected();
        $this->MyPrivate(); // Error Fatal
    }
}

$myclass2 = new MyClass2;
$myclass2->MyPublic(); // Funciona
$myclass2->Foo2(); // Public y Protected funcionan, pero Private no

class Bar
{
    public function test() {
        $this->testPrivate();
        $this->testPublic();
    }

    public function testPublic() {
        echo "Bar::testPublic\n";
    }

    private function testPrivate() {
        echo "Bar::testPrivate\n";
    }
}

class Foo extends Bar
{
    public function testPublic() {
        echo "Foo::testPublic\n";
    }

    private function testPrivate() {
        echo "Foo::testPrivate\n";
    }
}

$myFoo = new Foo();
$myFoo->test(); // Bar::testPrivate
                // Foo::testPublic
?>
]]>
    </programlisting>
   </example>
  </para>
 </sect2>

 <sect2 xml:id="language.oop5.visiblity-constants">
  <title>Visibilidad de las constantes</title>
  <para>
   A partir de PHP 7.1.0, las constantes de clase se pueden definir como públicas, privadas o
   protegidas. Las constantes declaradas sin una visibilidad explítica
   serán definidas como públicas.
  </para>
  <para>
   <example>
    <title>Declaración de constantes a partir de PHP 7.1.0</title>
    <programlisting role="php">
<![CDATA[
<?php
/**
 * Definir MiClase
 */
class MiClase
{
    // Declarar una constante pública
    public const MY_PUBLIC = 'public';

    // Declarar una constante protegida
    protected const MY_PROTECTED = 'protected';

    // Declarar una constante privada
    private const MY_PRIVATE = 'private';

    public function foo()
    {
        echo self::MY_PUBLIC;
        echo self::MY_PROTECTED;
        echo self::MY_PRIVATE;
    }
}

$myclass = new MiClase();
MiClase::MY_PUBLIC; // Funciona
MiClase::MY_PROTECTED; // Error fatal
MiClase::MY_PRIVATE; // Error fatal
$myclass->foo(); // Funcionan Public, Protected y Private


/**
 * Definir MiClase2
 */
class MiClase2 extends MiClase
{
    // Esta es pública
    function foo2()
    {
        echo self::MY_PUBLIC;
        echo self::MY_PROTECTED;
        echo self::MY_PRIVATE; // Error fatal
    }
}

$myclass2 = new MiClase2;
echo MiClase2::MY_PUBLIC; // Funciona
$myclass2->foo2(); // Funcionan Public y Protected, pero no Private
?>
]]>
     </programlisting>
    </example>
   </para>
 </sect2>

 <sect2 xml:id="language.oop5.visibility-other-objects">
  <title>Visibilidad desde otros objetos</title>
  <para>
   Los objetos del mismo tipo tendrán acceso a los miembros private y
   protected entre ellos aunque no sean de la misma instancia. Esto es porque
   los detalles específicos de implementación ya se conocen cuando se encuentra
   dentro de estos objetos.
  </para>
  <example>
   <title>Accediendo a miembros private del mismo tipo de objeto</title>
   <programlisting role="php">
<![CDATA[
<?php
class Test
{
    private $foo;

    public function __construct($foo)
    {
        $this->foo = $foo;
    }

    private function bar()
    {
        echo 'Método private accedido.';
    }

    public function baz(Test $other)
    {
        // Se puede cambiar la propiedad private:
        $other->foo = 'hola';
        var_dump($other->foo);

        // También se puede invocar al método private:
        $other->bar();
    }
}

$test = new Test('test');

$test->baz(new Test('other'));
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
string(5) "hola"
Método private accedido.
]]>
   </screen>
  </example>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
