<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 376d3f9c2ef7fcd64d8b8503d552013acefb8b5b Maintainer: Marqitos Status: ready -->
<!-- Reviewed: no -->
<chapter xml:id="language.fibers" xmlns="http://docbook.org/ns/docbook">
 <title>Fibers</title>

 <simplesect xml:id="language.fibers.overview">
  <title>Descripción general de Fibers</title>
  <?phpdoc print-version-for="fiber"?>
  <para>
   Los Fibers representan funciones de pila completa e interrumpibles. Los Fibers pueden suspenderse desde cualquier lugar en la pila de llamadas,
   pausando su ejecución dentro del Fiber hasta que se reanude más tarde.
  </para>
  <para>
   Los Fibers pausan toda la pila de ejecución, por lo que el llamador directo de la función no necesita cambiar la forma
   en que invoca la función
  </para>
  <para>
   La ejecución puede interrumpirse en cualquier lugar de la pila de llamadas utilizando <methodname>Fiber::suspend</methodname>
   (es decir, la llamada a <methodname>Fiber::suspend</methodname> puede estar en una función profundamente anidada o incluso no
   existir en absoluto)
  </para>
  <para>
   A diferencia de los <classname>Generator</classname>s sin pila, cada <classname>Fiber</classname> tiene su propia pila de llamadas,
   lo que permite que se pausen dentro de llamadas a funciones profundamente anidadas. Una función que declara un punto de interrupción
   (es decir, que llama a <methodname>Fiber::suspend</methodname>) no necesita cambiar su tipo de retorno, a diferencia de una función que utiliza
   &yield; y debe devolver una instancia de <classname>Generator</classname>.
  </para>
  <para>
   Los Fibers pueden suspenderse en cualquier llamada a función, incluidas aquellas realizadas desde la Máquina Virtual de PHP, como las funciones
   proporcionadas a <function>array_map</function> o los métodos llamados por &foreach; en un
   objeto <classname>Iterator</classname>.
  </para>
  <para>
   Una vez suspendido, la ejecución del Fiber puede reanudarse con cualquier valor utilizando <methodname>Fiber::resume</methodname> o lanzando una excepción en el Fiber utilizando <methodname>Fiber::throw</methodname>. El valor se devuelve (o la excepción se lanza) desde <methodname>Fiber::suspend</methodname>
   Once suspended, execution of the fiber may be resumed with any value using <methodname>Fiber::resume</methodname>
   or by throwing an exception into the fiber using <methodname>Fiber::throw</methodname>. The value is returned
   (or exception thrown) from <methodname>Fiber::suspend</methodname>.
  </para>
  <note>
   <simpara>
    Antes de PHP 8.4.0, no se permitía cambiar Fibers durante la ejecución de un
    <link linkend="language.oop5.decon.destructor">destructor</link>
    de objeto.
   </simpara>
  </note> 

  <example xml:id="language.fiber.example.basic"><!-- {{{ -->
   <title>Uso básico</title>
   <programlisting role="php">
    <![CDATA[
<?php
$fiber = new Fiber(function (): void {
   $value = Fiber::suspend('fiber');
   echo "Valor utilizado para reanudar el Fiber: ", $value, PHP_EOL;
});

$value = $fiber->start();

echo "Valor del Fiber al suspenderse: ", $value, PHP_EOL;

$fiber->resume('test');
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
    <![CDATA[
Valor del Fiber al suspenderse: fiber
Valor utilizado para reanudar el Fiber: test
]]>
   </screen>
  </example><!-- }}} -->

 </simplesect>

</chapter>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
