<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 3bc8fc7b9785c335e55d83986e6cd8968498dcfb Maintainer: Marqitos Status: ready -->
<!-- Reviewed: no -->
 <chapter xml:id="language.enumerations" xmlns="http://docbook.org/ns/docbook">
  <title>Enumerations</title>
  <sect1 xml:id="language.enumerations.overview">
   <title>Descripción general de las enumeraciónes</title>
   <?phpdoc print-version-for="enumerations"?>

   <para>
    Las enumeraciónes, o "Enums", permiten a un desarrollador definir un tipo personalizado que está limitado a uno
    de un número discreto de valores posibles. Esto puede ser especialmente útil al definir un
    modelo de dominio, ya que permite "hacer que los estados inválidos sean irrepresentables".
   </para>

   <para>
    Enums aparecen en muchos lenguajes con una variedad de características diferentes. En PHP,
    Enums son un tipo especial de objeto. El Enum en sí es una clase, y sus posibles
    casos son todos una instancia de esa clase. Eso significa que los casos de
    Enum son objetos válidos y pueden usarse en cualquier lugar donde se pueda usar un objeto, incluidas las comprobaciones de tipo.
   </para>

   <para>
    El ejemplo más popular de enumeraciónes es el tipo booleano incorporado, que es un
    tipo enumerado con valores legales &true; y &false;.
    Los Enums permiten a los desarrolladores definir sus propias enumeraciónes arbitrariamente robustas.
   </para>
  </sect1>
  <sect1 xml:id="language.enumerations.basics">
   <title>Enumeraciónes básicas</title>

   <para>
    Enums son similares a las clases, y comparten los mismos espacios de nombres que las clases, interfaces y rasgos (traits).
    También se pueden cargar automáticamente de la misma manera. Un Enum define un nuevo tipo, que tiene un número fijo
    y limitado de valores válidos.
   </para>


   <programlisting role="php">
<![CDATA[
<?php

enum Suit
{
    case Hearts;
    case Diamonds;
    case Clubs;
    case Spades;
}
?>
]]>
   </programlisting>

   <para>
    Esta declaración crea un nuevo tipo enumerado llamado <literal>Suit</literal>, que tiene
    cuatro y solo cuatro valores válidos: <literal>Suit::Hearts</literal>, <literal>Suit::Diamonds</literal>,
    <literal>Suit::Clubs</literal> y <literal>Suit::Spades</literal>. Las variables pueden asignarse
    a uno de esos valores válidos. Una función puede ser comprobada por tipo contra un tipo enumerado,
    en cuyo caso solo se pueden pasar valores de ese tipo.
   </para>

   <programlisting role="php">
<![CDATA[
<?php

function pick_a_card(Suit $suit)
{
    /* ... */
}

$val = Suit::Diamonds;

// OK
pick_a_card($val);

// OK
pick_a_card(Suit::Clubs);

// TypeError: pick_a_card(): Argument #1 ($suit) must be of type Suit, string given
pick_a_card('Spades');
?>
]]>
   </programlisting>

   <para>
    Una enumeración puede tener cero o más definiciones de <literal>case</literal>, sin un máximo.
    Una enumeración de cero casos es sintácticamente válida, aunque bastante inútil.
   </para>

   <para>
    Para casos de enumeración, se aplican las mismas reglas de sintaxis que a cualquier etiqueta en PHP, consulte
    <link linkend="language.constants">Constantes</link>.
   </para>

   <para>
    Por omisión, los casos no están intrínsecamente respaldados por un valor escalar. Es decir, <literal>Suit::Hearts</literal>
    no es igual a <literal>"0"</literal>. En su lugar, cada caso está respaldado por un objeto singleton de ese nombre. Eso significa que:
   </para>

   <programlisting role="php">
<![CDATA[
<?php

$a = Suit::Spades;
$b = Suit::Spades;

$a === $b; // true

$a instanceof Suit;  // true
?>
]]>
   </programlisting>

   <para>
    Esto también significa que los valores de enumeración nunca son <literal>&lt;</literal> o <literal>&gt;</literal> entre sí,
    ya que esas comparaciones no tienen sentido en objetos. Esas comparaciones siempre devolverán
    &false; al trabajar con valores de enumeración.
   </para>

   <para>
    Estos tipos de casos, sin datos relacionados, se llaman "Casos Puros". Un Enum que contiene
    solo Casos Puros se llama un Pure Enum.
   </para>

   <para>
    Todos los Casos Puros se implementan como instancias de su tipo de enumeración. El tipo de enumeración
    se representa internamente como una clase.
   </para>

   <para>
    Todos los Casos tienen una propiedad de solo lectura, <literal>name</literal>, que es el nombre
    con distinción de mayúsculas y minúsculas del caso en sí.
   </para>

   <programlisting role="php">
<![CDATA[
<?php

print Suit::Spades->name;
// Imprime "Spades"
?>
]]>
   </programlisting>

   <para>
    Esto también hace posible utilizar la función <function>defined</function> y <function>constant</function>
    para comprobar la existencia o leer un caso de enumeración si el nombre se obtiene dinámicamente.
    Esto es, sin embargo, desaconsejado, ya que el uso de <link linkend="language.enumerations.backed">Enumeraciónes respaldadas</link>
    debería funcionar para la mayoría de los casos de uso.
   </para>

  </sect1>

 <sect1 xml:id="language.enumerations.backed">
  <title>Enumeraciónes respaldadas</title>

  <para>
   Por omisión, los Casos Enumerados no tienen un equivalente escalar. Son simplemente objetos singleton. Sin embargo,
   hay muchos casos en los que un Caso Enumerado necesita poder viajar de ida y vuelta a una base de datos o
   almacenamiento de datos similar, por lo que tener un equivalente escalar (y por lo tanto trivialmente serializable)
   incorporado definido intrínsecamente es útil.
  </para>

  <para>Para definir un escalar equivalente para una Enumeración, la sintaxis es la siguiente:</para>

  <programlisting role="php">
<![CDATA[
<?php

enum Suit: string
{
    case Hearts = 'H';
    case Diamonds = 'D';
    case Clubs = 'C';
    case Spades = 'S';
}
?>
]]>
  </programlisting>

  <para>
   Un caso que tiene un equivalente escalar se llama un Caso Respaldado, ya que está "respaldado"
   por un valor más simple. Una Enumeración que contiene todos los Casos Respaldados se llama una "Enum Respaldada".
   Una Enum Respaldada solo puede contener Casos Respaldados. Una Enum Pura solo puede contener Casos Puros.
  </para>

  <para>
   Una Enum Respaldada puede estar respaldada por tipos de <literal>int</literal> o <literal>string</literal>,
   y una enumeración dada solo admite un solo tipo a la vez (es decir, no hay unión de <literal>int|string</literal>).
   Si una enumeración se marca como teniendo un equivalente escalar, entonces todos los casos deben tener un equivalente escalar único
   definido explícitamente. No hay equivalentes escalares generados automáticamente
   (por ejemplo, enteros secuenciales). Los Casos Respaldados deben ser únicos; dos casos de enum respaldados
   no pueden tener el mismo equivalente escalar. Sin embargo, una constante puede hacer referencia a un caso,
   creando efectivamente un alias. Consulte <link linkend="language.enumerations.constants">Constantes de enumeración</link>.
  </para>

  <para>
   Los valores equivalentes pueden ser una expresión escalar constante.
   Antes de PHP 8.2.0, los valores equivalentes debían ser literales o expresiones literales.
   Esto significa que las constantes y expresiones constantes no eran compatibles.
   Es decir, <code>1 + 1</code> era aceptable, pero no <code>1 + SOME_CONST</code>
   no lo es.
  </para>

  <para>
   Casos Respaldados tienen una propiedad adicional de solo lectura, <literal>value</literal>, que es el valor
   especificado en la definición.
  </para>

  <programlisting role="php">
<![CDATA[
<?php

print Suit::Clubs->value;
// Imprime "C"
?>
]]>
  </programlisting>

  <para>
   Para hacer cumplir la propiedad <literal>value</literal> como de solo lectura, una variable no puede
   asignarse como una referencia a ella. Es decir, lo siguiente arroja un error:
  </para>

  <programlisting role="php">
<![CDATA[
<?php

$suit = Suit::Clubs;
$ref = &$suit->value;
// Error: Cannot acquire reference to property Suit::$value
?>
]]>
  </programlisting>

  <para>
   Las enumeraciónes respaldadas implementan una interfaz interna <interfacename>BackedEnum</interfacename>,
   que expone dos métodos adicionales:
  </para>

  <simplelist>
   <member>
    <literal>from(int|string): self</literal> tomará un escalar y devolverá el Caso Enum correspondiente.
    Si no se encuentra uno, lanzará un <classname>ValueError</classname>. Esto es útil principalmente
    en casos en los que el escalar de entrada es de confianza y un valor de enumeración faltante debería ser
    considerado un error que detiene la aplicación.
   </member>
   <member>
    <literal>tryFrom(int|string): ?self</literal> tomará un escalar y devolverá el Caso Enum correspondiente.
    Si no se encuentra uno, devolverá <literal>null</literal>. Esto es útil principalmente en casos en los que
    el escalar de entrada no es de confianza y el llamante desea implementar su propia lógica de manejo de errores
    o de valor predeterminado.
   </member>
  </simplelist>

  <para>
   Los métodos <literal>from()</literal> y <literal>tryFrom()</literal> siguen las reglas estándar de tipado débil/fuerte.
   En modo de tipado débil, pasar un entero o una cadena es aceptable y el sistema convertirá el valor en consecuencia.
   Pasar un flotante también funcionará y se convertirá. En modo de tipado estricto, pasar un entero a <literal>from()</literal> en un
   enum respaldado por una cadena (o viceversa) resultará en un <classname>TypeError</classname>,
   al igual que un flotante en todas las circunstancias. Todos los demás tipos de parámetros lanzarán un TypeError
   en ambos modos.
  </para>

  <programlisting role="php">
<![CDATA[
<?php

$record = get_stuff_from_database($id);
print $record['suit'];

$suit =  Suit::from($record['suit']);
// Dato no válido lanzará un ValueError: "X" is not a valid scalar value for enum "Suit"
print $suit->value;

$suit = Suit::tryFrom('A') ?? Suit::Spades;
// Dato no válido devolverá null, por lo tanto será usado Suit::Spades en su lugar.
print $suit->value;
?>
]]>
  </programlisting>

  <para>Definir manualmente un método <literal>from()</literal> o <literal>tryFrom()</literal> en un Enum Respaldado devolverá en un error fatal.</para>

  </sect1>

 <sect1 xml:id="language.enumerations.methods">
  <title>Métodos de enumeraciónes</title>

  <para>
   Enums (tanto Enums Puros como Enums Respaldados) pueden contener métodos, y pueden implementar interfaces.
   Si un Enum implementa una interfaz, entonces cualquier comprobación de tipo para esa interfaz también aceptará
   todos los casos de ese Enum.
  </para>

  <programlisting role="php">
<![CDATA[
<?php

interface Colorful
{
    public function color(): string;
}

enum Suit implements Colorful
{
    case Hearts;
    case Diamonds;
    case Clubs;
    case Spades;

    // Rellenando el contrato de la interface.
    public function color(): string
    {
        return match($this) {
            Suit::Hearts, Suit::Diamonds => 'Red',
            Suit::Clubs, Suit::Spades => 'Black',
        };
    }

    // No es parte de una interfaz; eso está bien.
    public function shape(): string
    {
        return "Rectangle";
    }
}

function paint(Colorful $c)
{
   /* ... */
}

paint(Suit::Clubs);  // Funciona

print Suit::Diamonds->shape(); // Imprime "Rectangle"
?>
]]>
  </programlisting>

  <para>
   En este ejemplo, las cuatro instancias de <literal>Suit</literal> tienen dos métodos,
   <literal>color()</literal> y <literal>shape()</literal>. En lo que respecta al código de llamada
   y a las comprobaciones de tipo, se comportan exactamente igual que cualquier otra instancia de objeto.
  </para>

  <para>
   En un Enum Respaldado, la declaración de interfaz va después de la declaración del tipo de respaldo.
  </para>

  <programlisting role="php">
   <![CDATA[
<?php

interface Colorful
{
    public function color(): string;
}

enum Suit: string implements Colorful
{
    case Hearts = 'H';
    case Diamonds = 'D';
    case Clubs = 'C';
    case Spades = 'S';

    // Rellenando el contrato de la interface.
    public function color(): string
    {
        return match($this) {
            Suit::Hearts, Suit::Diamonds => 'Red',
            Suit::Clubs, Suit::Spades => 'Black',
        };
    }
}
?>
]]>
  </programlisting>

  <para>
   Dentro de un método, la variable <literal>$this</literal> está definida y se refiere a la instancia de Caso.
  </para>

  <para>
   Los métodos pueden ser arbitrariamente complejos, pero en la práctica generalmente devolverán un valor estático o
   &match; en <literal>$this</literal> para proporcionar
   diferentes resultados para diferentes casos.
  </para>

  <para>
   Tenga en cuenta que en este caso sería una mejor práctica de modelado de datos definir también un
   Tipo Enum <literal>SuitColor</literal> con valores Rojo y Negro y devolver eso en su lugar.
   Sin embargo, eso complicaría este ejemplo.
  </para>

  <para>
   La jerarquía anterior es lógicamente similar a la siguiente estructura de clase
   (aunque este no es el código real que se ejecuta):
  </para>

  <programlisting role="php">
<![CDATA[
<?php

interface Colorful
{
    public function color(): string;
}

final class Suit implements UnitEnum, Colorful
{
    public const Hearts = new self('Hearts');
    public const Diamonds = new self('Diamonds');
    public const Clubs = new self('Clubs');
    public const Spades = new self('Spades');

    private function __construct(public readonly string $name) {}

    public function color(): string
    {
        return match($this) {
            Suit::Hearts, Suit::Diamonds => 'Red',
            Suit::Clubs, Suit::Spades => 'Black',
        };
    }

    public function shape(): string
    {
        return "Rectangle";
    }

    public static function cases(): array
    {
        // Método no válido, porque definir manualmente un método cases() en un Enum está prohibido.
        // Vea también la sección "Listado de valores".
    }
}
?>
]]>
  </programlisting>

  <para>
   Los métodos pueden ser public, privados o protegidos, aunque en la práctica privado y
   protegido son equivalentes ya que no se permite la herencia.
  </para>

 </sect1>

 <sect1 xml:id="language.enumerations.static-methods">
  <title>Métodos estáticos de enumeraciónes</title>

  <para>
   Las enumeraciónes también pueden tener métodos estáticos. El uso de métodos estáticos en la
   enumeración en sí es principalmente para constructores alternativos. Por ejemplo:
  </para>

  <programlisting role="php">
<![CDATA[
<?php

enum Size
{
    case Small;
    case Medium;
    case Large;

    public static function fromLength(int $cm): self
    {
        return match(true) {
            $cm < 50 => self::Small,
            $cm < 100 => self::Medium,
            default => self::Large,
        };
    }
}
?>
]]>
  </programlisting>

  <para>
   Los métodos estáticos pueden ser públicos, privados o protegidos, aunque en la práctica privado
   y protegido son equivalentes ya que no se permite la herencia.
  </para>

 </sect1>

 <sect1 xml:id="language.enumerations.constants">
  <title>Enumeraciónes constantes</title>

  <para>
   Enumeraciónes pueden incluir constantes, que pueden ser públicas, privadas o protegidas,
   aunque en la práctica privado y protegido son equivalentes ya que no se permite la herencia.
  </para>

  <para>Una constante puede referirse a un caso de enumeración:</para>

  <programlisting role="php">
<![CDATA[
<?php

enum Size
{
    case Small;
    case Medium;
    case Large;

    public const Huge = self::Large;
}
?>
]]>
  </programlisting>
 </sect1>

 <sect1 xml:id="language.enumerations.traits">
  <title>Rasgos (Traits)</title>

  <para>Las enumeraciónes pueden aprovechar los rasgos, que se comportarán igual que en las clases.
   La advertencia es que los rasgos <literal>use</literal> (usados) en una enumeración no deben contener propiedades.
   Solo pueden incluir métodos, métodos estáticos y constantes. Un rasgo con propiedades resultará en
   un error fatal.
  </para>

  <programlisting role="php">
<![CDATA[
<?php

interface Colorful
{
    public function color(): string;
}

trait Rectangle
{
    public function shape(): string {
        return "Rectangle";
    }
}

enum Suit implements Colorful
{
    use Rectangle;

    case Hearts;
    case Diamonds;
    case Clubs;
    case Spades;

    public function color(): string
    {
        return match($this) {
            Suit::Hearts, Suit::Diamonds => 'Red',
            Suit::Clubs, Suit::Spades => 'Black',
        };
    }
}
?>
]]>
  </programlisting>
 </sect1>

 <sect1 xml:id="language.enumerations.expressions">
  <title>Valores de enumeración en expresiones constantes</title>

  <para>
   Por que los casos son representados como constantes en la enumeración misma, pueden ser usados como valores
   estáticos en la mayoría de las expresiones constantes: valores predeterminados de propiedades, valores predeterminados de variables estáticas,
   valores predeterminados de parámetros, valores constantes globales y de clase. No pueden ser usados en otros valores de casos de enumeración,
   pero las constantes normales pueden referirse a un caso de enumeración.
  </para>

  <para>
   Sin embargo, las llamadas a métodos mágicos implícitos como <classname>ArrayAccess</classname> en enumeraciones no están permitidas en definiciones estáticas
   o constantes ya que no podemos garantizar absolutamente que el valor resultante sea determinista
   o que la invocación del método esté libre de efectos secundarios. Llamadas a funciones, llamadas a métodos y
   acceso a propiedades siguen siendo operaciones no válidas en expresiones constantes.
  </para>

  <programlisting role="php">
<![CDATA[
<?php

// Esta es una definición de Enum completamente válida.
enum Direction implements ArrayAccess
{
    case Up;
    case Down;

    public function offsetExists($offset): bool
    {
        return false;
    }

    public function offsetGet($offset): mixed
    {
        return null;
    }

    public function offsetSet($offset, $value): void
    {
        throw new Exception();
    }

    public function offsetUnset($offset): void
    {
        throw new Exception();
    }
}

class Foo
{
    // Esto está permitido.
    const DOWN = Direction::Down;

    // Esto no está permitido, ya que puede no ser determinista.
    const UP = Direction::Up['short'];
    // Fatal error: Cannot use [] on enums in constant expression
}

// Esto es completamente válido, ya que no es una expresión constante.
$x = Direction::Up['short'];
var_dump("\$x is " . var_export($x, true));

$foo = new Foo();
?>
]]>
  </programlisting>
 </sect1>

 <sect1 xml:id="language.enumerations.object-differences">
  <title>Difencias de objetos</title>

  <para>
   Aunque las enumeraciónes están construidas sobre clases y objetos, no admiten toda la funcionalidad relacionada con objetos.
   En particular, los casos de Enum tienen prohibido tener estado.
  </para>

  <simplelist>
   <member>Constructores y Destructores están prohibidos.</member>
   <member>No soporta herencia. Las enumeraciónes no pueden heredarse ni ser heredadas.</member>
   <member>Propiedades estáticas o de objeto no están permitidas.</member>
   <member>Clonar un caso de Enum no está soportado, ya que los casos deben ser instancias singleton.</member>
   <member><link linkend="language.oop5.magic">Métodos mágicos</link>, excepto los listados a continuación, están prohibidos.</member>
   <member>Las enumeraciónes deben declararse siempre antes de ser usadas.</member>
  </simplelist>

  <para>Las siguientes funcionalidades de objetos están disponibles y se comportan igual que en cualquier otro objeto:</para>

  <simplelist>
   <member>Métodos públicos, privados y protegidos.</member>
   <member>Métodos estáticos públicos, privados y protegidos.</member>
   <member>Constantes públicas, privadas y protegidas.</member>
   <member>Las enumeraciónes pueden implementar cualquier número de interfaces.</member>
   <member>
    <link linkend="language.attributes">Atributos</link> pueden ser adjuntados a enumeraciónes y casos.
    El filtro de destino <constant>TARGET_CLASS</constant> incluye las enumeraciónes en sí.
    El filtro de destino <constant>TARGET_CLASS_CONST</constant> incluye los Casos de Enum.
   </member>
   <member>
    Los métodos mágicos <link linkend="object.call">__call</link>, <link linkend="object.callstatic">__callStatic</link>,
    e <link linkend="object.invoke">__invoke</link>.
   </member>
   <member>Las constantes <constant>__CLASS__</constant> y <constant>__FUNCTION__</constant> se comportan como normalmente.</member>
  </simplelist>

  <para>
   El literal <literal>::class</literal> mágico en un tipo Enum se evalúa al nombre del tipo
   incluyendo cualquier espacio de nombres, exactamente igual que un objeto. El literal <literal>::class</literal>
   mágico en una instancia de Caso también se evalúa al tipo Enum, ya que es una
   instancia de ese tipo.
  </para>

  <para>
   Además, los casos de Enum no pueden ser instanciados directamente con <literal>new</literal>, ni con
   <methodname>ReflectionClass::newInstanceWithoutConstructor</methodname> en reflexión. Ambos resultarán en un error.
  </para>

  <programlisting role="php">
<![CDATA[
<?php

$clovers = new Suit();
// Error: Cannot instantiate enum Suit

$horseshoes = (new ReflectionClass(Suit::class))->newInstanceWithoutConstructor()
// Error: Cannot instantiate enum Suit
?>
]]>
  </programlisting>
 </sect1>

 <sect1 xml:id="language.enumerations.listing">
  <title>Listando valores</title>

  <para>
   Tanto los Enums Puros como los Enums Respaldados implementan una interfaz interna llamada
   <interfacename>UnitEnum</interfacename>. <literal>UnitEnum</literal> incluye un método estático
   <literal>cases()</literal>. <literal>cases()</literal> devuelve un array empaquetado de
   todos los Casos definidos en el orden de declaración.
  </para>

  <programlisting role="php">
<![CDATA[
<?php

Suit::cases();
// Devuelve: [Suit::Hearts, Suit::Diamonds, Suit::Clubs, Suit::Spades]
?>
]]>
  </programlisting>

  <para>Definiar manualmente el método <literal>cases()</literal> en una enumeración causará en un error fatal.</para>
 </sect1>

 <sect1 xml:id="language.enumerations.serialization">
  <title>Serialización</title>

  <para>
   Las enumeraciónes se serializan de manera diferente a los objetos. Específicamente, tienen un nuevo código de serialización,
   <literal>"E"</literal>, que especifica el nombre del caso de la enumeración. El rutina de deserialización es capaz de
   usar eso para establecer una variable en el valor singleton existente. Eso asegura que:
  </para>

  <programlisting role="php">
<![CDATA[
<?php

Suit::Hearts === unserialize(serialize(Suit::Hearts));

print serialize(Suit::Hearts);
// E:11:"Suit:Hearts";
?>
]]>
  </programlisting>

  <para>
   Durante la deserialización, si no se puede encontrar un caso de enumeración que coincida con un valor serializado,
   se emitirá una advertencia y se devolverá &false;.
  </para>

  <para>
   Si un Enum Puro se serializa a JSON, se lanzará un error. Si un Enum Respaldado
   se serializa a JSON, se representará solo por su valor escalar, en el
   tipo apropiado. El comportamiento de ambos puede ser anulado implementando
   <classname>JsonSerializable</classname>.
  </para>

  <para>
   Para <function>print_r</function>, la salida de un caso de enumeración es ligeramente diferente
   de los objetos para minimizar la confusión.
  </para>

  <programlisting role="php">
<![CDATA[
<?php

enum Foo {
    case Bar;
}

enum Baz: int {
    case Beep = 5;
}

print_r(Foo::Bar);
print_r(Baz::Beep);

/* Imprime:

Foo Enum (
    [name] => Bar
)
Baz Enum:int {
    [name] => Beep
    [value] => 5
}
*/
?>
]]>
  </programlisting>
 </sect1>

 <sect1 xml:id="language.enumerations.object-differences.inheritance">

  <title>Porque las enumeraciónes no pueden ser heredadas</title>

  <simpara>
   Las clases tienen contratos en sus métodos:
  </simpara>

  <programlisting role="php">
<![CDATA[
<?php

class A {}
class B extends A {}

function foo(A $a) {}

function bar(B $b) {
    foo($b);
}
?>
]]>
 </programlisting>

  <simpara>
   Este código es seguro en cuanto a tipos, ya que B sigue el contrato de A, y a través de la magia de
   co/contra-varianza, cualquier expectativa que uno pueda tener de los métodos
   se mantendrá, expecto excepciones.
  </simpara>

  <simpara>
   Enums tienen contratos en sus casos, no en sus métodos:
  </simpara>

  <programlisting role="php">
<![CDATA[
<?php

enum ErrorCode {
    case SOMETHING_BROKE;
}

function quux(ErrorCode $errorCode)
{
    // Cuando escribimos, este código parece cubrir todos los casos
    match ($errorCode) {
        ErrorCode::SOMETHING_BROKE => true,
    };
}

?>
]]>
  </programlisting>

  <simpara>
   La sentencia &match; en la función <code>quux</code> puede ser analizada estáticamente para cubrir
   todos los casos en ErrorCode.
  </simpara>

  <simpara>
   But imagine it was allowed to extend enums:
  </simpara>


  <programlisting role="php">
<![CDATA[
<?php

// Código de experimento mental donde las enumeraciones no son finales.
// Nota, esto no funcionará realmente en PHP.
enum MoreErrorCode extends ErrorCode {
    case PEBKAC;
}

function fot(MoreErrorCode $errorCode) {
    quux($errorCode);
}

fot(MoreErrorCode::PEBKAC);

?>
]]>
 </programlisting>

  <simpara>
   Bajo reglas de herencia normales, una clase que extiende otra pasará
   la comprobación de tipo.
  </simpara>

  <simpara>
   El problema sería que la sentencia &match; en <code>quux()</code> ya no cubre todos
   los casos. Porque no sabe sobre <code>MoreErrorCode::PEBKAC</code> la sentencia &match; lanzará una excepción.
  </simpara>

  <simpara>
   Por esta razón, las enumeraciónes son finales y no pueden ser extendidas.
  </simpara>
 </sect1>

 <sect1 xml:id="language.enumerations.examples">
  &reftitle.examples;

  <para>
   <example>
    <title>Valores limitados básicos</title>
    <programlisting role="php">
<![CDATA[
<?php

enum SortOrder
{
    case Asc;
    case Desc;
}

function query($fields, $filter, SortOrder $order = SortOrder::Asc)
{
     /* ... */
}
?>
]]>
    </programlisting>
    <para>
     La función <literal>query()</literal> acepta un parámetro <literal>$order</literal> que
     debe ser de tipo <literal>SortOrder</literal> que garantiza que solo puede ser <literal>SortOrder::Asc</literal>
     o <literal>SortOrder::Desc</literal>. Cualquier otro valor resultará en un
     <classname>TypeError</classname>, por lo que no se necesita más comprobación o prueba de errores.
    </para>
   </example>
  </para>

  <para>

   <example>
    <title>Valores exclusivos avanzados</title>

    <programlisting role="php">
<![CDATA[
<?php

enum UserStatus: string
{
    case Pending = 'P';
    case Active = 'A';
    case Suspended = 'S';
    case CanceledByUser = 'C';

    public function label(): string
    {
        return match($this) {
            self::Pending => 'Pending',
            self::Active => 'Active',
            self::Suspended => 'Suspended',
            self::CanceledByUser => 'Canceled by user',
        };
    }
}
?>
]]>
    </programlisting>

    <para>
     En este ejemplo, el estado de un usuario puede ser uno de, y exclusivamente, <literal>UserStatus::Pending</literal>,
     <literal>UserStatus::Active</literal>, <literal>UserStatus::Suspended</literal>, o
     <literal>UserStatus::CanceledByUser</literal>. Una función puede tipar un parámetro con
     <literal>UserStatus</literal> y luego solo aceptar esos cuatro valores, punto.
    </para>

    <para>
     Todos los valores tienen un método <literal>label()</literal>, que devuelve una cadena legible por humanos.
     Esa cadena es independiente de la cadena equivalente escalar "nombre de máquina", que se puede usar en,
     por ejemplo, un campo de base de datos o un cuadro de selección HTML.
    </para>

    <programlisting role="php">
<![CDATA[
<?php

foreach (UserStatus::cases() as $case) {
    printf('<option value="%s">%s</option>\n', $case->value, $case->label());
}
?>
]]>
    </programlisting>
   </example>
  </para>

 </sect1>

 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
