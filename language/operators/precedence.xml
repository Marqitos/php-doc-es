<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 43d07782b514d0c7a8487f2c74063739f302df8d Maintainer: Marqitos Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="language.operators.precedence">
 <title>Precedencia de operadores</title>
 <titleabbrev>Precedencia de operadores</titleabbrev>
 <para>
  La precedencia de un operador indica qué tan "estrechamente" se unen dos
  expresiones juntas. Por ejemplo, en la expresión <literal>1 +
  5 * 3 </literal>, la respuesta es <literal>16</literal> y no
  <literal>18</literal> porque el operador de multiplicación ("*")
  tiene una precedencia mayor que el operador de adición ("+").
  Los paréntesis pueden ser usados para forzar la precedencia, si es necesario. Por
  ejemplo: <literal>(1 + 5) * 3</literal> se evalúa como
  <literal>18</literal>.
 </para>
 <para>
  Cuando los operadores tienen igual precedencia su asociatividad decide
  cómo se agrupan. Por ejemplo "-" tiene asociatividad a izquierda, así
  <literal>1 - 2 - 3</literal> se agrupa como <literal>(1 - 2) - 3</literal>
  y se evalúa a <literal>-4</literal>. "=", por otra parte, tiene
  asociatividad a derecha, así <literal>$a = $b = $c</literal> se agrupa como
  <literal>$a = ($b = $c)</literal>.
 </para>
 <para>
  Los operadores de igual precedencia que no son asociativos no pueden usarse
  unos junto a otros, por ejemplo, <literal>1 &lt; 2 &gt; 1</literal> es
  ilegal en PHP. La expresión <literal>1 &lt;= 1 == 1</literal>, por otro
  lado, es legal, ya que el operador <literal>==</literal> tiene menos
  precedencia que el operador <literal>&lt;=</literal>.
 </para>
 <para>
  Asociatividad sólo es significativa para operadores binarios (y ternarios).
  Los operadores unarios son prefijos o postfijos, por lo que esta noción no es aplicable.
  Por ejemplo <literal>!!$a</literal> sólo puede agruparse como <literal>!(!$a)</literal>.
 </para>
 <para>
  El uso de paréntesis, incluso cuando no es estrictamente necesario, a menudo puede
  aumentar la legibilidad del código haciendo grupos explícitamente en lugar de confiar
  en la precedencia y asociatividad implícitas del operador.
 </para>
 <para>
  La siguiente tabla enumera los operadores en orden de precedencia, con
  los de más alta precedencia al inicio. Los operadores en la misma línea
  tienen igual precedencia, en cuyo caso la asociatividad decide el agrupamiento.
  <table>
   <title>Precedencia de operadores</title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>Asociatividad</entry>
      <entry>Operadores</entry>
      <entry>Información adicional</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>no asociativo</entry>
      <entry>
       <literal>clone</literal>
       <literal>new</literal>
      </entry>
      <entry><link linkend="language.oop5.cloning">clone</link> y <link linkend="language.oop5.basic.new">new</link></entry>
     </row>
     <row>
      <entry>derecha</entry>
      <entry><literal>**</literal></entry>
      <entry><link linkend="language.operators.arithmetic">aritmética</link></entry>
     </row>
     <row>
      <entry>no asociativo</entry>
      <entry>
       <literal>+</literal>
       <literal>-</literal>
       <literal>++</literal>
       <literal>--</literal>
       <literal>~</literal>
       <literal>(int)</literal>
       <literal>(float)</literal>
       <literal>(string)</literal>
       <literal>(array)</literal>
       <literal>(object)</literal>
       <literal>(bool)</literal>
       <literal>@</literal>
      </entry>
      <entry>
       <link linkend="language.operators.arithmetic">aritmética</link> (unarios <literal>+</literal> y <literal>-</literal>),
       <link linkend="language.operators.increment">incremento/disminución</link>,
       <link linkend="language.operators.bitwise">bit a bit</link>,
       <link linkend="language.types.typecasting">conversión de tipos</link>&listendand;
       <link linkend="language.operators.errorcontrol">control de errores</link>
      </entry>
     </row>
     <row>
      <entry>izquierda</entry>
      <entry><literal>instanceof</literal></entry>
      <entry>
       <link linkend="language.operators.type">tipos</link>
      </entry>
     </row>
     <row>
      <entry>no asociativo</entry>
      <entry><literal>!</literal></entry>
      <entry>
       <link linkend="language.operators.logical">lógico</link>
      </entry>
     </row>
     <row>
      <entry>izquierda</entry>
      <entry>
       <literal>*</literal>
       <literal>/</literal>
       <literal>%</literal>
      </entry>
      <entry>
       <link linkend="language.operators.arithmetic">aritmética</link>
      </entry>
     </row>
     <row>
      <entry>izquierda</entry>
      <entry>
       <literal>+</literal>
       <literal>-</literal>
       <literal>.</literal>
      </entry>
      <entry>
       <link linkend="language.operators.arithmetic">aritmética</link> (binarios <literal>+</literal> y <literal>-</literal>),
       <link linkend="language.operators.array">array</link>&listendand;
       <link linkend="language.operators.string">string</link> (<literal>.</literal> antes de PHP 8.0.0)
      </entry>
     </row>
     <row>
      <entry>izquierda</entry>
      <entry>
       <literal>&lt;&lt;</literal>
       <literal>&gt;&gt;</literal>
      </entry>
      <entry>
       <link linkend="language.operators.bitwise">bit a bit</link>
      </entry>
     </row>
     <row>
      <entry>izquierda</entry>
      <entry><literal>.</literal></entry>
      <entry>
       <link linkend="language.operators.string">string</link> (desde PHP 8.0.0)
      </entry>
     </row>
     <row>
      <entry>non-associative</entry>
      <entry>
       <literal>&lt;</literal>
       <literal>&lt;=</literal>
       <literal>&gt;</literal>
       <literal>&gt;=</literal>
      </entry>
      <entry>
       <link linkend="language.operators.comparison">comparison</link>
      </entry>
     </row>
     <row>
      <entry>no asociativo</entry>
      <entry>
       <literal>==</literal>
       <literal>!=</literal>
       <literal>===</literal>
       <literal>!==</literal>
       <literal>&lt;&gt;</literal>
       <literal>&lt;=&gt;</literal>
      </entry>
      <entry>
       <link linkend="language.operators.comparison">comparación</link>
      </entry>
     </row>
     <row>
      <entry>izquierda</entry>
      <entry><literal>&amp;</literal></entry>
      <entry>
       <link linkend="language.operators.bitwise">bit a bit</link>&listendand;
       <link linkend="language.references">referencias</link></entry>
     </row>
     <row>
      <entry>izquierda</entry>
      <entry><literal>^</literal></entry>
      <entry>
       <link linkend="language.operators.bitwise">bit a bit</link>
      </entry>
     </row>
     <row>
      <entry>izquierda</entry>
      <entry><literal>|</literal></entry>
      <entry>
       <link linkend="language.operators.bitwise">bit a bit</link>
      </entry>
     </row>
     <row>
      <entry>izquierda</entry>
      <entry><literal>&amp;&amp;</literal></entry>
      <entry>
       <link linkend="language.operators.logical">lógico</link>
      </entry>
     </row>
     <row>
      <entry>izquierda</entry>
      <entry><literal>||</literal></entry>
      <entry>
       <link linkend="language.operators.logical">lógico</link>
      </entry>
     </row>
     <row>
      <entry>derecha</entry>
      <entry><literal>??</literal></entry>
      <entry>
       <link linkend="language.operators.comparison.coalesce">coalescencia de nulos</link>
      </entry>
     </row>
     <row>
      <entry>no asociativo</entry>
      <entry><literal>? :</literal></entry>
      <entry>
       <link linkend="language.operators.comparison.ternary">ternario</link>
       (asociativo a la izquierda antes de PHP 8.0.0)
      </entry>
     </row>
     <row>
      <entry>derecha</entry>
      <entry>
       <literal>=</literal>
       <literal>+=</literal>
       <literal>-=</literal>
       <literal>*=</literal>
       <literal>**=</literal>
       <literal>/=</literal>
       <literal>.=</literal>
       <literal>%=</literal>
       <literal>&amp;=</literal>
       <literal>|=</literal>
       <literal>^=</literal>
       <literal>&lt;&lt;=</literal>
       <literal>&gt;&gt;=</literal>
       <literal>??=</literal>
      </entry>
      <entry>
       <link linkend="language.operators.assignment">asignación</link>
      </entry>
     </row>
     <row>
      <entry>no asociativo</entry>
      <entry><literal>yield from</literal></entry>
      <entry>
       <link linkend="control-structures.yield.from">yield from</link>
      </entry>
     </row>
     <row>
      <entry>no asociativo</entry>
      <entry><literal>yield</literal></entry>
      <entry>
       <link linkend="control-structures.yield">yield</link>
      </entry>
     </row>
     <row>
      <entry>no asociativo</entry>
      <entry><literal>print</literal></entry>
      <entry><function>print</function></entry>
     </row>
     <row>
      <entry>izquierda</entry>
      <entry><literal>and</literal></entry>
      <entry>
       <link linkend="language.operators.logical">lógico</link>
      </entry>
     </row>
     <row>
      <entry>izquierda</entry>
      <entry><literal>xor</literal></entry>
      <entry>
       <link linkend="language.operators.logical">lógico</link>
      </entry>
     </row>
     <row>
      <entry>izquierda</entry>
      <entry><literal>or</literal></entry>
      <entry>
       <link linkend="language.operators.logical">lógico</link>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </para>
 <para>
  <example>
   <title>Asociatividad</title>
   <programlisting role="php">
<![CDATA[
<?php
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
// la asociatividad del operador ternario difiere de C/C++
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2 (antes de PHP 8.0.0)

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  La precedencia y asociatividad de los operadores solamente determinan cómo
  se agrupan las expresiones, no especifican un orden de evaluación. PHP no
  especifica (en general) el orden en que se evalúa una expresión
  y se debería evitar el código que se asume un orden específico de evaluación,
  ya que el comportamiento puede cambiar entre versiones de PHP o dependiendo de
  código circundante.
  <example>
   <title>Orden de evaluación no definido</title>
   <programlisting role="php">
<![CDATA[
<?php
$a = 1;
echo $a + $a++; // Podría imprimir 2 o 3

$i = 1;
$array[$i] = $i++; // Podría establecer el índice 1 o 2
?>
]]>
   </programlisting>
  </example>
  <example>
   <title><literal>+</literal>, <literal>-</literal> y <literal>.</literal> tienen la misma precedencia (antes de PHP 8.0.0)</title>
   <programlisting role="php">
<![CDATA[
<?php
$x = 4;
// Esta línea podría resultar en una salida inesperada:
echo "x menos uno igual a " . $x-1 . ", o eso espero\n";
// Ya que se evalúa como esta línea:
echo (("x menos uno igual a " . $x) - 1) . ", o eso espero\n";
// La precedencia deseada se puede forzar con paréntesis:
echo "x menos uno igual a " . ($x-1) . ", o eso espero\n";
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
x menos uno igual a -1, o eso espero
x menos uno igual a -1, o eso espero
x menos uno igual a 3, o eso espero
]]>
   </screen>
  </example>
 </para>
 <note>
  <para>
   Aunque <literal>=</literal> tiene una precedencia menor que
   la mayoría de los demás operadores, PHP aun permitirá expresiones
   similares a lo siguiente: <literal>if (!$a = foo())</literal>,
   en cuyo caso el valor devuelto de <literal>foo()</literal> es
   puesto en <varname>$a</varname>.
  </para>
 </note>
 <sect2 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       La concatenación de cadenas (<literal>.</literal>) ahora tiene una precedencia menor que
       la suma/resta aritmética (<literal>+</literal> y <literal>-</literal>) y
       el desplazamiento de bits izquierda/derecha (<literal>&lt;&lt;</literal> y <literal>&gt;&gt;</literal>);
       anteriormente tenía la misma precedencia que <literal>+</literal> y <literal>-</literal>
       y una precedencia mayor que <literal>&lt;&lt;</literal> y <literal>&gt;&gt;</literal>.
      </entry>
     </row>
     <row>
      <entry>8.0.0</entry>
      <entry>
       El operador ternario (<literal>? :</literal>) ahora no es asociativo;
       anteriormente era asociativo a la izquierda.
      </entry>
     </row>
     <row>
      <entry>7.4.0</entry>
      <entry>
       Confiando en la precendencia de la concatenación de cadenas (<literal>.</literal>)
       en relación a la suma/resta aritmética (<literal>+</literal> o <literal>-</literal>) o
       el desplazamiento de bits izquierda/derecha (<literal>&lt;&lt;</literal> o <literal>&gt;&gt;</literal>),
       es decir, usarlos juntos en una expresión sin paréntesis, está obsoleto.
      </entry>
     </row>
     <row>
      <entry>7.4.0</entry>
      <entry>
       Confiando en la asociatividad a la izquierda del operador ternario (<literal>? :</literal>),
       es decir, anidar múltiples operadores ternarios sin paréntesis, está obsoleto.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
