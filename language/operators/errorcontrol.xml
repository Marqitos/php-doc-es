<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 43d07782b514d0c7a8487f2c74063739f302df8d Maintainer: Marqitos Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="language.operators.errorcontrol">
 <title>Operadores de Control de Errores</title>
 <titleabbrev>Control de Errores</titleabbrev>
 <simpara>
  PHP soporta un operador de control de errores: el signo de arroba (@). Cuando
  se antepone a una expresión en PHP, cualquier mensaje de error que pueda
  ser generado por esa expresión será ignorado.
 </simpara>
 <para>
  Si se ha establecido una función controladora de errores personalizada con
  <function>set_error_handler</function>, esta todavía se seguirá llamando aunque
  se haya suprimido el diagnóstico.
 </para>

 <warning>
  <para>
   Antes de PHP 8.0.0, la llamada a <function>error_reporting</function> dentro del manejador de errores personalizado
   siempre devolvía <literal>0</literal>, si el error era suprimido por el operador <literal>@</literal>.
   Desde PHP 8.0.0, devuelve el valor de esta expresión (bit a bit):
   <literal>E_ERROR | E_CORE_ERROR | E_COMPILE_ERROR | E_USER_ERROR | E_RECOVERABLE_ERROR | E_PARSE</literal>.
  </para>
 </warning>

 <simpara>
  Cualquier mensaje de error generado por la expresión está disponible en el elemento <literal>"message"</literal>
  del array devuelto por <function>error_get_last</function>.
  El resultado de dicha función cambiará con cara error, por lo que necesita se comprobado lo antes posible.
 </simpara>
 <para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
/* Error intencionado en file */
$my_file = @file ('non_existent_file') or
    die ("Error al abrir el archivo: se produjo un error '" . error_get_last()['message'] . "'");

// Esto funciona para cualquier expresión, no solo funciones:
 value = @$cache[$key];
// No emitirá ningún aviso si el índice $key no existe.

?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <note>
  <simpara>
   El operador <literal>@</literal> trabaja sólo sobre
   <link linkend="language.expressions">expresiones</link>. Una simple regla
   de oro es: si se puede tomar el valor de algo, entonces se le puede anteponer
   el operador <literal>@</literal>.
   Por ejemplo, puede anteponerse a variables, a llamadas a funciones,
   a llamadas a ciertas constructores del lenguaje (p.ej. <function>include</function>s)
   y así sucesivamente.
   No puede anteponerse a definiciones de función o clase,
   ni a estructuras condicionales como <literal>if</literal> y
   &foreach;, y así sucesivamente.
  </simpara>
 </note>
 <warning>
  <para>
   Antes de PHP 8.0.0, era posible mediante el operador <literal>@</literal>
   deshabilitar errores críticos los cuales terminan la ejecución del script.
   Por ejemplo, anteponiendo <literal>@</literal> a una llamada a una función
   la cual no existe, al no estar disponible o estar mal escrito, el script
   terminaría sin ninguna indicación de por qué.
  </para>
 </warning>

 <sect2 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>error_reporting</function></member>
    <member><link linkend="ref.errorfunc">Manejo y registro de errores</link></member>
   </simplelist>
  </para>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
