<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 43d07782b514d0c7a8487f2c74063739f302df8d Maintainer: Marqitos Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="language.operators.type">
 <title>Operadores de Tipo</title>
 <titleabbrev>Tipo</titleabbrev>
 <para>
  <literal>instanceof</literal> se utiliza para determinar si una variable de PHP
  es un objeto instanciado de una cierta
  <link linkend="language.oop5.basic.class">class</link>:
  <example>
   <title>Utilizando <literal>instanceof</literal> con clases</title>
   <programlisting role="php">
<![CDATA[
<?php
class MyClass
{
}

class NotMyClass
{
}
$a = new MyClass;

var_dump($a instanceof MyClass);
var_dump($a instanceof NotMyClass);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(true)
bool(false)
]]>
   </screen>
  </example>
 </para>
 <para>
  <literal>instanceof</literal> también se puede utilizar para determinar si una variable
  es un objeto instanciado de una clase que hereda de una clase padre:
  <example>
   <title>Utilizando <literal>instanceof</literal> con clases heredadas</title>
   <programlisting role="php">
<![CDATA[
<?php
class ParentClass
{
}

class MyClass extends ParentClass
{
}

$a = new MyClass;

var_dump($a instanceof MyClass);
var_dump($a instanceof ParentClass);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(true)
bool(true)
]]>
   </screen>
  </example>
 </para>
 <para>
  Para comprobar si un objeto <emphasis>no</emphasis> es una instancia de una clase, se
  puede usar el <link linkend="language.operators.logical">operador lógico
  <literal>not</literal></link>.
  <example>
   <title>Utilizando <literal>instanceof</literal> para verificar si un objeto <emphasis>no</emphasis> es una
    instancia de una clase</title>
   <programlisting role="php">
<![CDATA[
<?php
class MyClass
{
}

$a = new MyClass;
var_dump(!($a instanceof stdClass));
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(true)
]]>
   </screen>
  </example>
 </para>
 <para>
  Finalmente, <literal>instanceof</literal> también se puede utilizar para determinar si
  una variable es un objeto instanciado de una clase que implementa una
  <link linkend="language.oop5.interfaces">interface</link>:
  <example>
   <title>Utilizando <literal>instanceof</literal> con interfaces</title>
   <programlisting role="php">
<![CDATA[
<?php
interface MyInterface
{
}

class MyClass implements MyInterface
{
}

$a = new MyClass;

var_dump($a instanceof MyClass);
var_dump($a instanceof MyInterface);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(true)
bool(true)
]]>
   </screen>
  </example>
 </para>
 <para>
  Aunque <literal>instanceof</literal> se utiliza generalmente con un nombre de clase literal,
  también puede ser utilizado con otro objeto o una variable string:
  <example>
   <title>Utilizando <literal>instanceof</literal> con otras variables</title>
   <programlisting role="php">
<![CDATA[
<?php
interface MyInterface
{
}

class MyClass implements MyInterface
{
}

$a = new MyClass;
$b = new MyClass;
$c = 'MyClass';
$d = 'NotMyClass';

var_dump($a instanceof $b); // $b es un objeto de la clase MyClass
var_dump($a instanceof $c); // $c es un string 'MyClass'
var_dump($a instanceof $d); // $d es un string 'NotMyClass'
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(true)
bool(true)
bool(false)
]]>
   </screen>
  </example>
 </para>
 <para>
  instanceof no lanza ningún error si la variable que está siendo comprobada no es
  un objeto, simplemente devuelve &false;. Las constantes, sin embargo, no está permitidas
  antes de PHP 7.3.0.
  <example>
   <title>Utilizando <literal>instanceof</literal> para comprobar otras variables</title>
   <programlisting role="php">
<![CDATA[
<?php
$a = 1;
$b = NULL;
$c = imagecreate(5, 5);
var_dump($a instanceof stdClass); // $a es un entero
var_dump($b instanceof stdClass); // $b es NULL
var_dump($c instanceof stdClass); // $c es un recurso
var_dump(FALSE instanceof stdClass);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(false)
bool(false)
bool(false)
PHP Fatal error:  instanceof expects an object instance, constant given
]]>
   </screen>
  </example>
 </para>
 <para>
  Desde PHP 7.3.0, se permiten constantes en el lado izquierdo del
  operador <literal>instanceof</literal>.
  <example>
   <title>Utilizando <literal>instanceof</literal> para comprobar constantes</title>
   <programlisting role="php">
<![CDATA[
<?php
var_dump(FALSE instanceof stdClass);
?>
]]>
   </programlisting>
   &example.outputs.73;
   <screen>
<![CDATA[
bool(false)
]]>
   </screen>
  </example>
 </para>
 <para>
  Desde PHP 8.0.0, <literal>instanceof</literal> puede ahora ser usado con expresiones arbitrarias.
  La expresión debe estar envuelto entre parentesis y producir un <type>string</type>.
  <!-- RFC: https://wiki.php.net/rfc/variable_syntax_tweaks -->
  <example>
   <title>Utilizando <literal>instanceof</literal> con expresiones arbitrarias</title>
   <programlisting role="php">
<![CDATA[
<?php

class ClassA extends \stdClass {}
class ClassB extends \stdClass {}
class ClassC extends ClassB {}
class ClassD extends ClassA {}

function getSomeClass(): string
{
    return ClassA::class;
}

var_dump(new ClassA instanceof ('std' . 'Class'));
var_dump(new ClassB instanceof ('Class' . 'B'));
var_dump(new ClassC instanceof ('Class' . 'A'));
var_dump(new ClassD instanceof (getSomeClass()));
?>
]]>
   </programlisting>
   &example.outputs.8;
   <screen>
<![CDATA[
bool(true)
bool(true)
bool(false)
bool(true)
]]>
   </screen>
  </example>
 </para>
 <simpara>
  El operador <literal>instanceof</literal> tiene una variante funcional
  con la función <function>is_a</function>.
 </simpara>

 <sect2 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>get_class</function></member>
    <member><function>is_a</function></member>
   </simplelist>
  </para>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
