<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 43d07782b514d0c7a8487f2c74063739f302df8d Maintainer: Marqitos Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="language.operators.increment">
 <title>Operadores de incremento/disminución</title>
 <titleabbrev>Incremento y disminución</titleabbrev>
 <para>
  PHP soporta operadores de -pre y post- incremento y disminución.
  Estos operadores unarios permiten incrementar o disminuir el valor de uno en uno.
 </para>
 <table>
  <title>Operadores de incremento/disminución</title>
  <tgroup cols="3">
   <thead>
    <row>
     <entry>Ejemplo</entry>
     <entry>Nombre</entry>
     <entry>Efecto</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry>++$a</entry>
     <entry>Pre-incremento</entry>
     <entry>Incrementa <varname>$a</varname> en uno, y luego devuelve <varname>$a</varname>.</entry>
    </row>
    <row>
     <entry>$a++</entry>
     <entry>Post-incremento</entry>
     <entry>Devuelve <varname>$a</varname>, y luego incrementa <varname>$a</varname> en uno.</entry>
    </row>
    <row>
     <entry>--$a</entry>
     <entry>Pre-disminución</entry>
     <entry>Disminuye <varname>$a</varname> en uno, y luego devuelve <varname>$a</varname>.</entry>
    </row>
    <row>
     <entry>$a--</entry>
     <entry>Post-disminución</entry>
     <entry>Devuelve <varname>$a</varname>, y luego disminuye <varname>$a</varname> en uno.</entry>
    </row>
   </tbody>
  </tgroup>
 </table>

 <para>
  Aquí hay un script simple de ejemplo:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
echo 'Post-incremento:', PHP_EOL;
$a = 5;
var_dump($a++);
var_dump($a);

echo 'Pre-incremento:', PHP_EOL;
$a = 5;
var_dump(++$a);
var_dump($a);

echo 'Post-disminución:', PHP_EOL;
$a = 5;
var_dump($a--);
var_dump($a);

echo 'Pre-disminución:', PHP_EOL;
$a = 5;
var_dump(--$a);
var_dump($a);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Post-incremento:
int(5)
int(6)
Pre-incremento:
int(6)
int(6)
Post-disminución:
int(5)
int(4)
Pre-disminución:
int(4)
int(4)
]]>
   </screen>
  </informalexample>

  <warning>
   <para>
    Los operadores de incremento o disminución no tienen efecto en valores
    de tipo <type>bool</type>.
    Se emite un <constant>E_WARNING</constant> desde PHP 8.3.0,
    porque esto convertirá implicitamente el valor a <type>int</type> en el futuro.
   </para>
   <para>
    El operador de disminución no tiene efecto en valores
    de tipo <type>null</type>.
    Se emite un <constant>E_WARNING</constant> desde PHP 8.3.0,
    porque esto convertirá implicitamente el valor a <type>int</type> en el futuro.
   </para>
   <para>
    El operador de disminución no tiene efecto en valores no-
    <link linkend="language.types.numeric-strings">string numéricos</link>.
    Se emite un <constant>E_WARNING</constant> desde PHP 8.3.0,
    porque se lanzará un <classname>TypeError</classname> en el futuro.
   </para>
  </warning>
  <note>
   <para>
    Objetos internos que soportan sobrecarga de adición y/o sustracción 
    también pueden ser incrementados o disminuidos.
    Uno de esos objetos internos es <classname>GMP</classname>.
   </para>
  </note>
 </para>

 <sect2 xml:id="language.operators.increment.string">
  <title>Función de incremento de string PERL</title>
  <warning>
   <simpara>
    Esta funcionalidad está obsoleta desde PHP 8.3.0.
    En su lugar se debe utilizar la función <function>str_increment</function>.
   </simpara>
  </warning>

  <para>
   Es posible incrementar un no-
   <link linkend="language.types.numeric-strings">string numérico</link>
   en PHP. El string debe ser un string ASCII alfanumérico.
   Lo que incrementa las letras hasta la siguiente letra, al llegar a la letra
   <literal>Z</literal> el incremento se traslada al valor de la izquierda.
   Por ejemplo, <code>$a = 'Z'; $a++;</code> convierte <varname>$a</varname>
   en <literal>'AA'</literal>.
  </para>

  <example>
   <title>Ejemplo de incremento de string PERL</title>
   <programlisting role="php">
<![CDATA[
<?php
echo '== Strings alfabéticos ==' . PHP_EOL;
$s = 'W';
for ($n=0; $n<6; $n++) {
    echo ++$s . PHP_EOL;
}
// Strings alfanuméricos se comportan diferente
echo '== Strings alfanuméricos ==' . PHP_EOL;
$d = 'A8';
for ($n=0; $n<6; $n++) {
    echo ++$d . PHP_EOL;
}
$d = 'A08';
for ($n=0; $n<6; $n++) {
    echo ++$d . PHP_EOL;
}
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
== Strings alfabéticos ==
X
Y
Z
AA
AB
AC
== Strings alfanuméricos ==
A9
B0
B1
B2
B3
B4
A09
A10
A11
A12
A13
A14
]]>
   </screen>
  </example>

  <warning>
   <para>
    Si el string alfanumérico puede ser interpretado como un
    <link linkend="language.types.numeric-strings">string numérico</link>
    este será convertido a un <type>int</type> o <type>float</type>.
    it will be cast to an <type>int</type> or <type>float</type>.
    Este es un problema particularmente con cadenas que parecen números de punto flotante
    escritos en notación exponencial.
    La función <function>str_increment</function> no sufre
    estas conversiones de tipos implícitas.
   </para>
   <example>
    <title>String alfanumérico convertido a float</title>
    <programlisting role="php">
<![CDATA[
<?php
$s = "5d9";
var_dump(++$s);
var_dump(++$s);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(3) "5e0"
float(6)
]]>
    </screen>
    <para>
     Esto es porque el valor <literal>"5e0"</literal> es interpertado
     como un <type>float</type> y convertido al valor <literal>5.0</literal>
     antes de ser incrementado.
    </para>
   </example>
  </warning>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
