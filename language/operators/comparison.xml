<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: e50e79746736dbdfbabe9bd3566793b3ddf38f58 Maintainer: Marqitos Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="language.operators.comparison">
 <title>Operadores de comparación</title>
 <titleabbrev>Comparación</titleabbrev>
 <simpara>
  Los operadores de comparación, como su nombre indica, te permiten comparar
  dos valores. También puede que te interese ver
  <link linkend="types.comparisons">las tablas de comparación de tipos</link>,
  ya que muestran ejemplos de varias comparaciones relacionadas con tipos.
 </simpara>
 <table>
  <title>Operadores de comparación</title>
  <tgroup cols="3">
   <thead>
    <row>
     <entry>Ejemplo</entry>
     <entry>Nombre</entry>
     <entry>Resultado</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry>$a == $b</entry>
     <entry>Igual</entry>
     <entry>&true; si <varname>$a</varname> es igual a <varname>$b</varname> después de la conversión de tipos.</entry>
    </row>
    <row>
     <entry>$a === $b</entry>
     <entry>Identico</entry>
     <entry>
      &true; si <varname>$a</varname> es igual a <varname>$b</varname>, y son del mismo
      tipo.
     </entry>
    </row>
    <row>
     <entry>$a != $b</entry>
     <entry>No igual</entry>
     <entry>&true; si <varname>$a</varname> no es igual a <varname>$b</varname> después de la conversión de tipos.</entry>
    </row>
    <row>
     <entry>$a &lt;&gt; $b</entry>
     <entry>No igual</entry>
     <entry>&true; si <varname>$a</varname> no es igual a <varname>$b</varname> después de la conversión de tipos.</entry>
    </row>
    <row>
     <entry>$a !== $b</entry>
     <entry>No identico</entry>
     <entry>
      &true; si <varname>$a</varname> no es igual a <varname>$b</varname>, o no son del mismo
      tipo.
     </entry>
    </row>
    <row>
     <entry>$a &lt; $b</entry>
     <entry>Menor que</entry>
     <entry>&true; si <varname>$a</varname> es estricatamente menor que <varname>$b</varname>.</entry>
    </row>
    <row>
     <entry>$a &gt; $b</entry>
     <entry>Mayor que</entry>
     <entry>&true; si <varname>$a</varname> es estrictamente mayor que <varname>$b</varname>.</entry>
    </row>
    <row>
     <entry>$a &lt;= $b</entry>
     <entry>Menor o igual a</entry>
     <entry>&true; si <varname>$a</varname> es menor o igual a <varname>$b</varname>.</entry>
    </row>
    <row>
     <entry>$a &gt;= $b</entry>
     <entry>Mayor o igual a</entry>
     <entry>&true; si <varname>$a</varname> es mayor o igual a <varname>$b</varname>.</entry>
    </row>
    <row>
     <entry>$a &lt;=&gt; $b</entry>
     <entry>Operador combinado (operador de nave espacial)</entry>
     <entry>
      Un <type>int</type> menor que, igual a, o mayor que cero cuando
      <varname>$a</varname> es menor que, igual a, o mayor que
      <varname>$b</varname>, respectivamente.
     </entry>
    </row>
   </tbody>
  </tgroup>
 </table>
 <para>
  Si ambos operandos son
  <link linkend="language.types.numeric-strings">cadenas numéricas</link>,
  o uno de los operandos es un número y el otro es una
  <link linkend="language.types.numeric-strings">cadena numérica</link>,
  entonces la comparación se realiza numéricamente.
  Estos reglas también se aplican a la sentencia
  <link linkend="control-structures.switch">switch</link>.
  El tipo de conversión no se realiza cuando la comparación es
  <literal>===</literal> o <literal>!==</literal> ya que esto implica
  comparar tanto el tipo como el valor.
 </para>

 <warning>
  <para>
   Antes de PHP 8.0.0, si una <type>string</type> es comparada con un número
   o una cadena numérica entonces la <type>string</type> era convertida a un
   número antes de realizar la comparación. Esto puede llevar a resultados
   sorprendentes como se puede ver en el siguiente ejemplo:
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
var_dump(0 == "a");
var_dump("1" == "01");
var_dump("10" == "1e1");
var_dump(100 == "1e2");

switch ("a") {
case 0:
    echo "0";
    break;
case "a":
    echo "a";
    break;
}
?>
]]>
    </programlisting>
    &example.outputs.7;
    <screen>
<![CDATA[
bool(true)
bool(true)
bool(true)
bool(true)
0
]]>
    </screen>
    &example.outputs.8;
    <screen>
<![CDATA[
bool(false)
bool(true)
bool(true)
bool(true)
a
]]>
    </screen>
   </informalexample>
  </para>
 </warning>

 <para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// Enteros
echo 1 <=> 1; // 0
echo 1 <=> 2; // -1
echo 2 <=> 1; // 1

// Números de punto flotante
echo 1.5 <=> 1.5; // 0
echo 1.5 <=> 2.5; // -1
echo 2.5 <=> 1.5; // 1

// Cadenas
echo "a" <=> "a"; // 0
echo "a" <=> "b"; // -1
echo "b" <=> "a"; // 1

echo "a" <=> "aa"; // -1
echo "zz" <=> "aa"; // 1

// Arrays
echo [] <=> []; // 0
echo [1, 2, 3] <=> [1, 2, 3]; // 0
echo [1, 2, 3] <=> []; // 1
echo [1, 2, 3] <=> [1, 2, 1]; // 1
echo [1, 2, 3] <=> [1, 2, 4]; // -1

// Objetos
$a = (object) ["a" => "b"];
$b = (object) ["a" => "b"];
echo $a <=> $b; // 0

$a = (object) ["a" => "b"];
$b = (object) ["a" => "c"];
echo $a <=> $b; // -1

$a = (object) ["a" => "c"];
$b = (object) ["a" => "b"];
echo $a <=> $b; // 1

// no solo se comparan los valores; las claves deben coincidir
$a = (object) ["a" => "b"];
$b = (object) ["b" => "b"];
echo $a <=> $b; // 1

?>
]]>

   </programlisting>
  </informalexample>
 </para>

 <para>
  Para varios tipos, la comparación se realiza de acuerdo a la siguiente
  tabla (en orden).
 </para>
 <table xml:id="language.operators.comparison.types">
  <title>Comparación con Varios Tipos</title>
  <tgroup cols="3">
   <thead>
    <row>
     <entry>Tipo de Operando 1</entry>
     <entry>Tipo de Operando 2</entry>
     <entry>Resultado</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry><type>null</type> o <type>string</type></entry>
     <entry><type>string</type></entry>
     <entry>Convertir &null; a "", comparación numérica o léxica</entry>
    </row>
    <row>
     <entry><type>bool</type> o <type>null</type></entry>
     <entry>cualquier cosa</entry>
     <entry>Comvertir ambos operandos a <type>bool</type>, &false; &lt; &true;</entry>
    </row>
    <row>
     <entry><type>object</type></entry>
     <entry><type>object</type></entry>
     <entry>Las clases incorporadas pueden definir su propia comparación, clases
      diferentes son incomparables, para clases iguales ver
      <link linkend="language.oop5.object-comparison">Comparación de Objetos</link>
     </entry>
    </row>
    <row>
     <entry><type>string</type>, <type>recurso</type>, <type>int</type> o <type>float</type></entry>
     <entry><type>string</type>, <type>recurso</type>, <type>int</type> o <type>float</type></entry>
     <entry>Convertir strings y recursos a números, matemática usual</entry>
    </row>
    <row>
     <entry><type>array</type></entry>
     <entry><type>array</type></entry>
     <entry>Array con más miembros es mayor, si key de operando 1 no se
      encuentra en el operando 2 entonces los arrays son incomparables, en caso
      contrario - comparar valor por valor (ver siguiente ejemplo)</entry>
    </row>
    <row>
     <entry><type>object</type></entry>
     <entry>cualquier cosa</entry>
     <entry>El <type>object</type> es siempre mayor</entry>
    </row>
    <row>
     <entry><type>array</type></entry>
     <entry>cualquier cosa</entry>
     <entry>El <type>array</type> es siempre mayor</entry>
    </row>
   </tbody>
  </tgroup>
 </table>

 <para>
  <example>
   <title>Comparacion Booleano/null</title>
   <programlisting role="php">
<![CDATA[
<?php
// Bool y null son comparados siempre como bool
var_dump(1 == TRUE);  // TRUE - igual que (bool) 1 == TRUE
var_dump(0 == FALSE); // TRUE - igual que (bool) 0 == FALSE
var_dump(100 < TRUE); // FALSE - igual que (bool) 100 < TRUE
var_dump(-10 < FALSE);// FALSE - igual que (bool) -10 < FALSE
var_dump(min(-100, -10, NULL, 10, 100)); // NULL - (bool) NULL < (bool) -100 es FALSE < TRUE
?>
]]>
   </programlisting>
  </example>
 </para>

 <para>
  <example>
   <title>Transcripción de comparación de arrays estándar</title>
   <programlisting role="php">
<![CDATA[
<?php
// Arrays con comparadas como esto con operadores de comparación estándar así como el operador de nave espacial.
function standard_array_compare($op1, $op2)
{
    if (count($op1) < count($op2)) {
        return -1; // $op1 < $op2
    } elseif (count($op1) > count($op2)) {
        return 1; // $op1 > $op2
    }
    foreach ($op1 as $key => $val) {
        if (!array_key_exists($key, $op2)) {
            return 1;
        } elseif ($val < $op2[$key]) {
            return -1;
        } elseif ($val > $op2[$key]) {
            return 1;
        }
    }
    return 0; // $op1 == $op2
}
?>
]]>
   </programlisting>
  </example>
 </para>

 <warning>
  <title>Comparación de números de punto flotante</title>

  <para>
   Devido a la forma en que los <type>float</type>s son representados internamente,
   no deberías comparar dos <type>float</type>s para igualdad.
  </para>

  <para>
   Vease la documentación para <type>float</type> para más información.
  </para>
 </warning>

 <note>
  <simpara>
   Tenga en cuenta que la conversión de tipos de PHP no siempre es obvia al comparar valores de diferentes tipos,
   particularmente comparando &integer;s con &boolean;s o &integer;s con &string;s. Por lo tanto, generalmente es
   recomendable usar comparaciones <literal>===</literal> y <literal>!==</literal> en la mayoría de los casos en lugar de
   <literal>==</literal> y <literal>!=</literal>.
  </simpara>
 </note>

 <sect2 xml:id="language.operators.comparison.incomparable">
  <title>Valores Incomparables</title>
  <simpara>
   Mientras las comparaciones de identidad (<literal>===</literal> y <literal>!==</literal>)
   pueden ser aplicadas a valores arbitrarios, los otros operadores de comparación solo deberían ser
   aplicados a valores comparables. El resultado de comparar valores incomparables es
   indefinido, y no debería depender de ello.
  </simpara>
 </sect2>

 <sect2 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>strcasecmp</function></member>
    <member><function>strcmp</function></member>
    <member><link linkend="language.operators.array">Operadores de array</link></member>
    <member><link linkend="language.types">Tipos</link></member>
   </simplelist>
  </para>
 </sect2>

 <sect2 xml:id="language.operators.comparison.ternary">
  <title>Operador ternario</title>
  <para>
   Otro operador condicional es el operador "?:" (o ternario).
   <example>
    <title>Asignando un valor por defecto</title>
    <programlisting role="php">
<![CDATA[
<?php
// Ejemplo de uso: Operador ternario
$action = (empty($_POST['action'])) ? 'default' : $_POST['action'];

// Lo anterior es idéntico a esta sentencia if/else
if (empty($_POST['action'])) {
    $action = 'default';
} else {
    $action = $_POST['action'];
}
?>
]]>
    </programlisting>
   </example>
   La expresión <literal>(expr1) ? (expr2) : (expr3)</literal>
   se evalúa <replaceable>expr2</replaceable> si
   <replaceable>expr1</replaceable> es evaluado como &true;, y
   <replaceable>expr3</replaceable> si
   <replaceable>expr1</replaceable> es evaluado como &false;.
  </para>
  <para>
   Es posible omitir la parte media del operador ternario.
   La expresión <literal>expr1 ?: expr3</literal> devuelve
   el resultado de <replaceable>expr1</replaceable> si <replaceable>expr1</replaceable>
   es evaluado como &true;, y <replaceable>expr3</replaceable> en caso contrario.
   <replaceable>expr1</replaceable> solo es evaluado una vez en este caso.
  </para>
  <note>
   <simpara>
    Por favor tenga en cuenta que el operador ternario es una expresión, y como tal
    no es evaluado como una variable, pero sí al resultado de una expresión. Es
    importante saber esto si se quiere devolver una variable por referencia.
    La sentencia <literal>return $var == 42 ? $a : $b;</literal> en una
    devolución por referencia por lo tanto, no funcionará y
    se emitirá una advertencia.
   </simpara>
  </note>
  <note>
   <para>
    Es recomendable evitar "apilar" expresiones ternarias.
    El comportamiento de PHP cuando se usan más de un operador ternario sin paréntesis
    en una sola expresión no es obvio en comparación con otros lenguajes de programación.
    De hecho, antes de PHP 8.0.0, las expresiones ternarias se evaluaban de izquierda a derecha,
    en lugar de derecha a izquierda como la mayoría de los otros lenguajes de programación.
    Depender de la asociatividad de izquierda está obsoleto a partir de PHP 7.4.0.
    A partir de PHP 8.0.0, el operador ternario no es asociativo.
    <example>
     <title>Comportamiento no-obvio del operador Ternario</title>
     <programlisting role="php">
<![CDATA[
<?php
// En primer momento, lo siguiente parece devolver 'true'
echo (true ? 'true' : false ? 't' : 'f');

// Sin embargo, la salida real de lo anterior es 't' antes de PHP 8.0.0
// esto es porque las expresiones ternarias son asociativas a la izquierda

// La siguiente es una versión más obvia del mismo código que el anterior
echo ((true ? 'true' : false) ? 't' : 'f');

// Aquí, uno puede ver que la primera expresión se evalúa a 'true', que
// a su vez se evalúa a (bool) true, devolviendo así la rama verdadera de la
// segunda expresión ternaria.
?>
]]>
     </programlisting>
    </example>
   </para>
  </note>
  <note>
   <para>
    Encadenando expresiones ternarias cortas (<literal>?:</literal>), sin embargo, es estable y se comporta razonablemente.
    Se evaluará al primer argumento que se evalúe como un valor no falso. Tenga en cuenta que los valores indefinidos
    seguirán generando una advertencia.
    <example>
     <title>Encadenado ternarios cortos</title>
     <programlisting role="php">
<![CDATA[
<?php
echo 0 ?: 1 ?: 2 ?: 3, PHP_EOL; //1
echo 0 ?: 0 ?: 2 ?: 3, PHP_EOL; //2
echo 0 ?: 0 ?: 0 ?: 3, PHP_EOL; //3
?>
]]>
     </programlisting>
    </example>
   </para>
  </note>
 </sect2>

 <sect2 xml:id="language.operators.comparison.coalesce">
  <title>Operador de Coalescencia de Nulos</title>
  <para>
   Otro operador condicional útil es el operador "??" (o de coalescencia de nulos).
   Another useful shorthand operator is the "??" (or null coalescing) operator.
   <example>
    <title>Asignando un valor por defecto</title>
    <programlisting role="php">
<![CDATA[
<?php
// Ejemplo de uso: Operador de Coalescencia de Nulos
$action = $_POST['action'] ?? 'default';

// Lo anterior es idéntico a esta sentencia if/else
if (isset($_POST['action'])) {
    $action = $_POST['action'];
} else {
    $action = 'default';
}
?>
]]>
    </programlisting>
   </example>
   La expresión <literal>(expr1) ?? (expr2)</literal> se evalúa a
   <replaceable>expr2</replaceable> si <replaceable>expr1</replaceable> es
   &null;, y <replaceable>expr1</replaceable> en caso contrario.
  </para>
  <para>
   En particular, este operador no emite un aviso o advertencia si el valor del lado
   izquierdo no existe, al igual que <function>isset</function>. Esto es especialmente
   útil en claves de arrays.
  </para>
  <note>
   <simpara>
    Por favor tenga en cuenta que el operador de coalescencia de nulos es una expresión, y como tal
    no es evaluado como una variable, pero sí al resultado de una expresión. Es
    importante saber esto si se quiere devolver una variable por referencia.
    La sentencia <literal>return $foo ?? $bar;</literal> en una
    devolución por referencia por lo tanto, no funcionará y
    se emitirá una advertencia.
   </simpara>
  </note>
  <note>
   <para>
    El operador de coalescencia de nulos tiene una baja precedencia. Esto significa que si se mezcla
    con otros operadores (como la concatenación de cadenas o los operadores aritméticos)
    probablemente se requerirán paréntesis.
   </para>
   <programlisting role="php">
<![CDATA[
<?php
// Emitirá una advertencia de que $name es indefinido.
print 'Mr. ' . $name ?? 'Anonymous';

// Imprime "Mr. Anonymous"
print 'Mr. ' . ($name ?? 'Anonymous');
?>
]]>
   </programlisting>
  </note>
  <note>
   <para>
    Tenga en cuenta que el operador de coalescencia de nulos permite anidamiento simple:
    <example>
     <title>Anidamiento del operador de coalescencia de nulos</title>
     <programlisting role="php">
<![CDATA[
<?php

$foo = null;
$bar = null;
$baz = 1;
$qux = 2;

echo $foo ?? $bar ?? $baz ?? $qux; // Imprime 1

?>
]]>
     </programlisting>
    </example>
   </para>
  </note>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
